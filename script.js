// –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
class ProductivityTracker {
    constructor() {
        this.directions = this.loadDirections();
        this.chart = null;
        this.overallChart = null;
        this.chartUpdateTimer = null;
        this.candlesCache = new Map();
        // Auth & Cloud sync state
        this.firebase = { app: null, auth: null, db: null };
        this.currentUser = null;
        this.cloudSaveTimer = null;
        this.lastCloudSavedAt = null;
        // –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∏ —Ñ–ª–∞–≥–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        this.instanceId = (() => {
            try {
                const key = 'productivityInstanceId';
                let id = localStorage.getItem(key);
                if (!id) {
                    id = Date.now() + '-' + Math.random().toString(36).slice(2,10);
                    localStorage.setItem(key, id);
                }
                return id;
            } catch (_) {
                return Date.now() + '-' + Math.random().toString(36).slice(2,10);
            }
        })();
        this.isApplyingRemote = false;
        this.cloudUnsubscribe = null;
        
        // –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑—É–º–∞ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–º –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º
        this.zoomState = {
            visibleCandlesCount: 50,    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–∏–º—ã—Ö —Å–≤–µ—á–µ–π (–∫–∞–∫ –≤ TradingView)
            centerIndex: null,          // –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            minCandlesCount: 10,        // –ú–∏–Ω–∏–º—É–º —Å–≤–µ—á–µ–π (–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∑—É–º)
            maxCandlesCount: 1000       // –ú–∞–∫—Å–∏–º—É–º —Å–≤–µ—á–µ–π –Ω–∞ —ç–∫—Ä–∞–Ω–µ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        };
        // –û—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑—É–º–∞ –¥–ª—è –æ–±—â–µ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
        this.overallZoomState = {
            visibleCandlesCount: 50,
            centerIndex: null,
            minCandlesCount: 10,
            maxCandlesCount: 1000
        };
        this.maxRenderedCandles = 800; // –ñ–µ—Å—Ç–∫–∏–π –ø–æ—Ç–æ–ª–æ–∫ –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º—ã—Ö —Å–≤–µ—á–µ–π –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        
        // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
        this.categories = this.loadCategories() || [
            { id: 'daily100', name: '100% –µ–∂–µ–¥–Ω–µ–≤–Ω–æ!', icon: 'üî•', priority: 1 },
            { id: 'daily80', name: '80% –µ–∂–µ–¥–Ω–µ–≤–Ω–æ!', icon: '‚ö°', priority: 2 },
            { id: 'daily50', name: '50% –µ–∂–µ–¥–Ω–µ–≤–Ω–æ!', icon: 'üìà', priority: 3 },
            { id: 'other1', name: '–ü—Ä–æ—á–µ–µ 1', icon: 'üìù', priority: 4 },
            { id: 'other2', name: '–ü—Ä–æ—á–µ–µ 2', icon: 'üìã', priority: 5 },
            { id: 'other3', name: '–ü—Ä–æ—á–µ–µ 3', icon: 'üìä', priority: 6 },
            { id: 'other4', name: '–ü—Ä–æ—á–µ–µ 4', icon: 'üìå', priority: 7 }
        ];

        // –†–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π: 'horizontal' | 'compact'
        this.layoutMode = this.loadLayoutMode();

        // –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è: –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.tasks = this.loadTasks();
        
        this.initializeElements();
        this.bindEvents();
        this.setupFirebase();
        // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–π –≤–∞–ª–∏–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–µ—Ä–µ–Ω–æ—Å ¬´–æ—Å–∏—Ä–æ—Ç–µ–≤—à–∏—Ö¬ª –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
        this.ensureValidCategories();
        this.reassignOrphanDirections();
        this.render();
        this.updateChart();
        this.startChartAutoUpdate();
        // –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
        this.lastIntervalStartMs = null;
        this.frameScheduled = false;
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª—é—á —Ö—Ä–∞–Ω–µ–Ω–∏—è, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–ª–∏ 'guest'
    getStorageKey(baseKey) {
        const uid = (this.currentUser && this.currentUser.uid) ? this.currentUser.uid : 'guest';
        return `${baseKey}:${uid}`;
    }

    // === –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è: —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ ===
    loadTasks() {
        try { return JSON.parse(localStorage.getItem(this.getStorageKey('productivityTasks')) || '{}'); } catch(_) { return {}; }
    }
    saveTasks() {
        try { localStorage.setItem(this.getStorageKey('productivityTasks'), JSON.stringify(this.tasks)); } catch(_) {}
    }

    // –ö–ª—é—á –¥–Ω—è –Ω–µ–¥–µ–ª–∏ (0-6): 0 - –ü–Ω, 6 - –í—Å; –Ω–æ JS getDay() –¥–∞—ë—Ç 0 - –í—Å
    getWeekdayKeys() {
        return ['mon','tue','wed','thu','fri','sat','sun'];
    }
    getWeekdayLabel(key) {
        const map = { mon: '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', tue: '–í—Ç–æ—Ä–Ω–∏–∫', wed: '–°—Ä–µ–¥–∞', thu: '–ß–µ—Ç–≤–µ—Ä–≥', fri: '–ü—è—Ç–Ω–∏—Ü–∞', sat: '–°—É–±–±–æ—Ç–∞', sun: '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ' };
        return map[key] || key;
    }

    toggleTasksSection() {
        if (!this.tasksSection) return;
        const visible = this.tasksSection.style.display !== 'none';
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–∏–¥–∏–º–æ—Å—Ç—å —Å–µ–∫—Ü–∏–∏ –∑–∞–¥–∞—á, –Ω–µ —Å–∫—Ä—ã–≤–∞—è –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã
        const placement = this.getTasksPlacement();
        if (placement === 'modal') {
            this.renderTasksWeek(true);
            this.showTasksModal();
            return;
        }
        this.tasksSection.style.display = visible ? 'none' : 'block';
        if (!visible) {
            this.renderTasksWeek();
            this.applyTasksPlacement();
            try { this.tasksSection.scrollIntoView({ behavior: 'smooth', block: 'start' }); } catch(_) {}
        }
    }

    // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞—Å–∫–æ–≤: { mon: [ { id, text, status: 'pending'|'done'|'failed' } ], ... }
    ensureTasksWeek() {
        const keys = this.getWeekdayKeys();
        if (!this.tasks || typeof this.tasks !== 'object') this.tasks = {};
        for (const k of keys) if (!Array.isArray(this.tasks[k])) this.tasks[k] = [];
    }

    addTask(dayKey, text) {
        this.ensureTasksWeek();
        const trimmed = (text || '').trim();
        if (!trimmed) {
            this.showNotification('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è', 'error');
            return;
        }
        const task = { id: Date.now() + Math.random().toString(36).slice(2,8), text: trimmed, status: 'pending' };
        this.tasks[dayKey].push(task);
        this.saveTasks();
        this.renderTasksWeek();
    }

    setTaskStatus(dayKey, taskId, status) {
        this.ensureTasksWeek();
        const list = this.tasks[dayKey] || [];
        const item = list.find(t => t.id === taskId);
        if (!item) return;
        item.status = status; // 'done' | 'failed' | 'pending'
        this.saveTasks();
        this.renderTasksWeek();
    }

    deleteTask(dayKey, taskId) {
        this.ensureTasksWeek();
        this.tasks[dayKey] = (this.tasks[dayKey] || []).filter(t => t.id !== taskId);
        this.saveTasks();
        this.renderTasksWeek();
    }

    renderTasksWeek(toModal = false) {
        const container = toModal ? this.tasksModalGrid : this.tasksWeekGrid;
        if (!container) return;
        this.ensureTasksWeek();
        container.innerHTML = '';
        const dayKeys = this.getWeekdayKeys();

        dayKeys.forEach((key) => {
            const dayCol = document.createElement('div');
            dayCol.className = 'tasks-day';

            const header = document.createElement('div');
            header.className = 'tasks-day-header';
            const title = document.createElement('div');
            title.className = 'tasks-day-title';
            title.textContent = this.getWeekdayLabel(key);
            const addBtn = document.createElement('button');
            addBtn.className = 'tasks-add-btn';
            addBtn.innerHTML = '<i class="fas fa-plus"></i>';
            addBtn.title = '–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ';
            addBtn.addEventListener('click', () => {
                const text = prompt(`–ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ (${this.getWeekdayLabel(key)}):`);
                if (text != null) this.addTask(key, text);
            });
            header.appendChild(title);
            header.appendChild(addBtn);

            const listEl = document.createElement('div');
            listEl.className = 'tasks-list';
            for (const t of this.tasks[key]) {
                listEl.appendChild(this.renderTaskItem(key, t));
            }

            dayCol.appendChild(header);
            dayCol.appendChild(listEl);
            container.appendChild(dayCol);
        });
    }

    renderTaskItem(dayKey, task) {
        const item = document.createElement('div');
        item.className = `task-item task-${task.status || 'pending'}`;

        const text = document.createElement('div');
        text.className = 'task-text';
        text.textContent = task.text;

        const actions = document.createElement('div');
        actions.className = 'task-actions';

        const doneBtn = document.createElement('button');
        doneBtn.className = 'task-btn done';
        doneBtn.title = '–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ';
        doneBtn.innerHTML = '<i class="fas fa-check"></i>';
        doneBtn.addEventListener('click', () => this.setTaskStatus(dayKey, task.id, 'done'));

        const failBtn = document.createElement('button');
        failBtn.className = 'task-btn fail';
        failBtn.title = '–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ';
        failBtn.innerHTML = '<i class="fas fa-times"></i>';
        failBtn.addEventListener('click', () => this.setTaskStatus(dayKey, task.id, 'failed'));

        const pendingBtn = document.createElement('button');
        pendingBtn.className = 'task-btn pending';
        pendingBtn.title = '–°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç—É—Å';
        pendingBtn.innerHTML = '<i class="fas fa-undo"></i>';
        pendingBtn.addEventListener('click', () => this.setTaskStatus(dayKey, task.id, 'pending'));

        const delBtn = document.createElement('button');
        delBtn.className = 'task-btn delete';
        delBtn.title = '–£–¥–∞–ª–∏—Ç—å';
        delBtn.innerHTML = '<i class="fas fa-trash"></i>';
        delBtn.addEventListener('click', () => this.deleteTask(dayKey, task.id));

        actions.appendChild(doneBtn);
        actions.appendChild(failBtn);
        actions.appendChild(pendingBtn);
        actions.appendChild(delBtn);

        item.appendChild(text);
        item.appendChild(actions);
        return item;
    }

    applyTasksPlacement() {
        if (!this.tasksSection) return;
        const placement = this.getTasksPlacement();
        // –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Å–µ–∫—Ü–∏—é –∑–∞–¥–∞—á –≤ DOM
        try {
            const container = document.querySelector('.container');
            if (!container) return;
            // –£–¥–∞–ª—è–µ–º –∏ –≤—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–Ω–æ–≤–æ –≤ –Ω—É–∂–Ω–æ–µ –º–µ—Å—Ç–æ
            if (placement === 'top') {
                // –ø–æ—Å–ª–µ —à–∞–ø–∫–∏
                const header = document.querySelector('.header');
                if (header && header.nextSibling) {
                    container.insertBefore(this.tasksSection, header.nextSibling);
                }
            } else if (placement === 'bottom') {
                // –ø–µ—Ä–µ–¥ —Ñ—É—Ç–µ—Ä–æ–º
                const footer = document.querySelector('.footer');
                if (footer) {
                    container.insertBefore(this.tasksSection, footer);
                }
            }
        } catch(_) {}
    }

    onTasksPlacementChange() {
        this.applyTasksPlacement();
        const placement = this.getTasksPlacement();
        if (placement === 'modal') {
            // –°–∫—Ä—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É
            if (this.tasksSection) this.tasksSection.style.display = 'none';
            this.showTasksModal();
        }
    }

    getTasksPlacement() {
        try {
            const selectValue = this.tasksPlacementSelect ? this.tasksPlacementSelect.value : null;
            const saved = localStorage.getItem(this.getStorageKey('productivityTasksPlacement'));
            return selectValue || saved || 'top';
        } catch(_) { return 'top'; }
    }

    // (–ù–µ–¥–∞–≤–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É)

    showTasksModal() {
        if (!this.tasksModal) return;
        this.renderTasksWeek(true);
        this.tasksModal.style.display = 'flex';
        if (this.tasksPlacementSelect && this.tasksPlacementSelectModal) {
            this.tasksPlacementSelectModal.value = this.tasksPlacementSelect.value || 'modal';
        }
    }
    hideTasksModal() {
        if (!this.tasksModal) return;
        this.tasksModal.style.display = 'none';
    }

    toggleTasksModalFullscreen() {
        if (!this.tasksModal) return;
        const modal = this.tasksModal.querySelector('.modal');
        if (!modal) return;
        const isFull = modal.classList.toggle('modal-fullscreen');
        if (this.tasksModalResizeButton) {
            this.tasksModalResizeButton.innerHTML = isFull ? '<i class="fas fa-compress"></i>' : '<i class="fas fa-expand"></i>';
        }
    }

    syncTasksPlacementFromModal() {
        if (!this.tasksPlacementSelectModal) return;
        const value = this.tasksPlacementSelectModal.value;
        if (this.tasksPlacementSelect) this.tasksPlacementSelect.value = value;
        if (value === 'modal') {
            this.showTasksModal();
        } else {
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏
            this.hideTasksModal();
            this.tasksSection.style.display = 'block';
            this.renderTasksWeek(false);
            this.applyTasksPlacement();
            try { this.tasksSection.scrollIntoView({ behavior: 'smooth', block: value === 'top' ? 'start' : 'end' }); } catch(_) {}
        }
        // –°–æ—Ö—Ä–∞–Ω–∏–º –≤—ã–±–æ—Ä –≤ localStorage
        try { localStorage.setItem(this.getStorageKey('productivityTasksPlacement'), value); } catch(_) {}
    }

    // –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏ —Ä–∞–∑–±–∏–≤–∫–∏ –¥–ª—è –æ–±—â–µ–π —Å–≤–µ—á–∏
    openBreakdownForOverallCandle(rawCandle, period) {
        if (!this.breakdownModal) return;
        // –î–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ —É –Ω–∞—Å –µ—Å—Ç—å intervalStart/intervalEnd
        const startMs = rawCandle.intervalStart ? new Date(rawCandle.intervalStart).getTime() : new Date(rawCandle.x).getTime();
        const endMs = rawCandle.intervalEnd ? new Date(rawCandle.intervalEnd).getTime() : startMs;

        // –°–æ–±–∏—Ä–∞–µ–º –≤–∫–ª–∞–¥ –∏–∑ –∫–∞–∂–¥–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        const items = [];
        for (const dir of this.directions) {
            const inInterval = (dir.scores || []).filter(s => {
                const t = new Date(s.date).getTime();
                if (rawCandle.intervalStart) {
                    return t >= startMs && t < endMs;
                }
                // –î–ª—è –¥–Ω–µ–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ —Å—Ä–∞–≤–Ω–∏–º –ø–æ –¥–Ω—é –¥–∞—Ç—ã —Å–≤–µ—á–∏ –∏ –∑–∞–ø–∏—Å–∏
                const dayKey = new Date(rawCandle.x).toISOString().slice(0,10);
                return new Date(s.date).toISOString().slice(0,10) === dayKey;
            });
            if (inInterval.length) {
                const sum = inInterval.reduce((acc, s) => acc + (s.value || 0), 0);
                items.push({
                    directionId: dir.id,
                    directionName: dir.name,
                    sum,
                    count: inInterval.length,
                    scores: inInterval
                });
            }
        }

        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å–ø–∏—Å–æ–∫
        if (this.breakdownModalTitle) {
            if (rawCandle.intervalStart) {
                const start = new Date(startMs).toLocaleString('ru-RU');
                const end = new Date(endMs).toLocaleString('ru-RU');
                this.breakdownModalTitle.textContent = `–†–∞–∑–±–∏–≤–∫–∞ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º: ${start} - ${end}`;
            } else {
                this.breakdownModalTitle.textContent = `–†–∞–∑–±–∏–≤–∫–∞ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º: ${new Date(rawCandle.x).toLocaleDateString('ru-RU')}`;
            }
        }

        const totalSum = items.reduce((a,b) => a + b.sum, 0);
        if (this.breakdownSummary) {
            this.breakdownSummary.textContent = `–ò—Ç–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π: ${totalSum.toFixed(2)} ‚Ä¢ –ó–∞–ø–∏—Å–µ–π: ${items.reduce((a,b)=>a+b.count,0)}`;
        }

        if (this.breakdownList) {
            this.breakdownList.innerHTML = '';
            items.sort((a,b) => Math.abs(b.sum) - Math.abs(a.sum));
            items.forEach(it => {
                const el = document.createElement('div');
                el.className = 'breakdown-item';
                const title = document.createElement('div');
                title.className = 'breakdown-item-title';
                const sign = it.sum > 0 ? '+' : '';
                title.textContent = `${it.directionName}: ${sign}${it.sum.toFixed(2)} (–∑–∞–ø–∏—Å–µ–π: ${it.count})`;
                const meta = document.createElement('div');
                meta.className = 'breakdown-item-meta';
                meta.textContent = it.scores.map(s => `${(s.value>0?'+':'')}${s.value}`).join(', ');
                el.appendChild(title);
                el.appendChild(meta);
                this.breakdownList.appendChild(el);
            });
        }

        this.breakdownModal.style.display = 'flex';
    }

    closeBreakdownModal() {
        if (this.breakdownModal) this.breakdownModal.style.display = 'none';
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    initializeElements() {
        this.directionInput = document.getElementById('directionInput');
        this.addButton = document.getElementById('addButton');
        this.directionsList = document.getElementById('directionsList');
        this.emptyState = document.getElementById('emptyState');
        // Auth UI
        this.openAuthButton = document.getElementById('openAuthButton');
        this.logoutButton = document.getElementById('logoutButton');
        this.authStatus = document.getElementById('authStatus');
        this.authModal = document.getElementById('authModal');
        this.closeAuthButton = document.getElementById('closeAuthButton');
        this.signInButton = document.getElementById('signInButton');
        this.signUpButton = document.getElementById('signUpButton');
        this.authEmailInput = document.getElementById('authEmail');
        this.authPasswordInput = document.getElementById('authPassword');
        this.layoutToggleButton = null;
        // Tasks UI
        this.openTasksButton = document.getElementById('openTasksButton');
        this.tasksSection = document.getElementById('tasksSection');
        this.tasksWeekGrid = document.getElementById('tasksWeekGrid');
        this.directionsSectionEl = document.querySelector('.directions-section');
        this.tasksPlacementSelect = document.getElementById('tasksPlacementSelect');
        this.tasksModal = document.getElementById('tasksModal');
        this.tasksModalGrid = document.getElementById('tasksModalGrid');
        this.closeTasksModal = document.getElementById('closeTasksModal');
        this.closeTasksModalFooter = document.getElementById('closeTasksModalFooter');
        this.tasksPlacementSelectModal = document.getElementById('tasksPlacementSelectModal');
        this.tasksModalResizeButton = document.getElementById('tasksModalResizeButton');
        this.addCategoryButton = document.getElementById('addCategoryButton');
        this.openTrashButton = document.getElementById('openTrashButton');
        this.trashModal = document.getElementById('trashModal');
        this.closeTrashButton = document.getElementById('closeTrashButton');
        this.trashDirectionsList = document.getElementById('trashDirectionsList');
        this.trashCategoriesList = document.getElementById('trashCategoriesList');
        this.emptyTrashButton = document.getElementById('emptyTrashButton');
        this.chartSection = document.getElementById('chartSection');
        this.directionSelect = document.getElementById('directionSelect');
        this.periodSelect = document.getElementById('periodSelect');
        this.productivityChart = document.getElementById('productivityChart');
        this.overallChartSection = document.getElementById('overallChartSection');
        this.overallChartCanvas = document.getElementById('overallChart');
        this.overallPeriodSelect = document.getElementById('overallPeriodSelect');
        this.overallIntervalInfo = document.getElementById('overallIntervalInfo');
        this.overallTimeLeftElement = document.getElementById('overallTimeLeft');
        this.intervalInfo = document.getElementById('intervalInfo');
        this.timeLeftElement = document.getElementById('timeLeft');
        
        // –≠–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑—É–º–æ–º
        this.candlesCountSelect = document.getElementById('candlesCountSelect');
        this.zoomInButton = document.getElementById('zoomInButton');
        this.zoomOutButton = document.getElementById('zoomOutButton');
        this.resetZoomButton = document.getElementById('resetZoomButton');
        
        // –≠–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        this.navStepSelect = document.getElementById('navStepSelect');
        this.navLeftButton = document.getElementById('navLeftButton');
        this.navRightButton = document.getElementById('navRightButton');
        this.navToEndButton = document.getElementById('navToEndButton');
        
        // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–æ–∑–∏—Ü–∏–∏
        this.positionIndicator = document.getElementById('positionIndicator');
        this.positionText = document.getElementById('positionText');
        
        // –≠–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏
        this.exportButton = document.getElementById('exportButton');
        this.importButton = document.getElementById('importButton');
        this.importFileInput = document.getElementById('importFileInput');
        this.clearAllValuesButton = document.getElementById('clearAllValuesButton');
        
        // –≠–ª–µ–º–µ–Ω—Ç—ã –¥–µ—Ç–∞–ª—å–Ω–æ–π –ø–∞–Ω–µ–ª–∏
        this.directionDetailPanel = document.getElementById('directionDetailPanel');
        this.closeDetailPanel = document.getElementById('closeDetailPanel');
        this.detailDirectionName = document.getElementById('detailDirectionName');
        this.detailDirectionScore = document.getElementById('detailDirectionScore');
        this.detailCategorySelect = document.getElementById('detailCategorySelect');
        this.detailScoreInput = document.getElementById('detailScoreInput');
        this.detailDescriptionInput = document.getElementById('detailDescriptionInput');
        this.saveDescriptionButton = document.getElementById('saveDescriptionButton');
        this.detailColorPicker = document.getElementById('detailColorPicker');
        this.detailPercentPicker = null;
        this.detailAddScoreButton = document.getElementById('detailAddScoreButton');
        this.detailDeleteButton = document.getElementById('detailDeleteButton');
        this.detailClearAllScoresButton = document.getElementById('detailClearAllScoresButton');
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ scoring
        this.detailFocusMaxPointsInput = document.getElementById('detailFocusMaxPointsInput');
        this.detailTimeMaxMinutesInput = document.getElementById('detailTimeMaxMinutesInput');
        this.detailTimeMaxPointsInput = document.getElementById('detailTimeMaxPointsInput');
        this.detailResultMaxPointsInput = document.getElementById('detailResultMaxPointsInput');
        this.detailTotalMaxPointsInput = document.getElementById('detailTotalMaxPointsInput');
        // –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
        this.calcFocusPercentInput = document.getElementById('calcFocusPercentInput');
        this.calcMinutesInput = document.getElementById('calcMinutesInput');
        this.calcResultPercentInput = document.getElementById('calcResultPercentInput');
        this.calcPreview = document.getElementById('calcPreview');
        this.calcApplyButton = document.getElementById('calcApplyButton');
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –ø–∞–Ω–µ–ª–∏
        this.currentDetailDirection = null;

        // –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ —Å–≤–µ—á–∞–º: —ç–ª–µ–º–µ–Ω—Ç—ã –º–æ–¥–∞–ª–∫–∏
        this.commentModal = document.getElementById('commentModal');
        this.commentModalTitle = document.getElementById('commentModalTitle');
        this.commentInfo = document.getElementById('commentInfo');
        this.commentText = document.getElementById('commentText');
        this.saveCommentButton = document.getElementById('saveCommentButton');
        this.deleteCommentButton = document.getElementById('deleteCommentButton');
        this.closeCommentButton = document.getElementById('closeCommentButton');
        this.currentCommentKey = null;

        // –ú–æ–¥–∞–ª–∫–∞ —Ä–∞–∑–±–∏–≤–∫–∏ –æ–±—â–µ–π —Å–≤–µ—á–∏
        this.breakdownModal = document.getElementById('breakdownModal');
        this.breakdownModalTitle = document.getElementById('breakdownModalTitle');
        this.breakdownSummary = document.getElementById('breakdownSummary');
        this.breakdownList = document.getElementById('breakdownList');
        this.closeBreakdownButton = document.getElementById('closeBreakdownButton');
        this.closeBreakdownFooterButton = document.getElementById('closeBreakdownFooterButton');
    }

    // –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
    bindEvents() {
        this.addButton.addEventListener('click', () => this.addDirection());
        this.directionInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                this.addDirection();
            }
        });
        
        this.directionSelect.addEventListener('change', () => this.updateChart());
        this.periodSelect.addEventListener('change', () => {
            this.updateChart();
            // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–µ—Ä–∏–æ–¥–∞
            this.startChartAutoUpdate();
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑—É–º–æ–º
        this.candlesCountSelect.addEventListener('change', () => this.setCandlesCount());
        this.zoomInButton.addEventListener('click', () => this.zoomIn());
        this.zoomOutButton.addEventListener('click', () => this.zoomOut());
        this.resetZoomButton.addEventListener('click', () => this.resetZoom());

        // –û—Ç–∫—Ä—ã—Ç—å/–∑–∞–∫—Ä—ã—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
        if (this.openTasksButton) {
            this.openTasksButton.addEventListener('click', () => this.toggleTasksSection());
        }
        if (this.tasksPlacementSelect) {
            this.tasksPlacementSelect.addEventListener('change', () => this.onTasksPlacementChange());
        }
        if (this.closeTasksModal) this.closeTasksModal.addEventListener('click', () => this.hideTasksModal());
        if (this.closeTasksModalFooter) this.closeTasksModalFooter.addEventListener('click', () => this.hideTasksModal());
        if (this.tasksPlacementSelectModal) {
            this.tasksPlacementSelectModal.addEventListener('change', () => this.syncTasksPlacementFromModal());
        }
        if (this.tasksModalResizeButton) {
            this.tasksModalResizeButton.addEventListener('click', () => this.toggleTasksModalFullscreen());
        }
        // Recent vertical ‚Äî —É–¥–∞–ª–µ–Ω–æ
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        this.navLeftButton.addEventListener('click', () => this.navigateLeft());
        this.navRightButton.addEventListener('click', () => this.navigateRight());
        this.navToEndButton.addEventListener('click', () => this.navigateToEnd());
        if (this.overallPeriodSelect) {
            this.overallPeriodSelect.addEventListener('change', () => this.updateOverallChart(this.overallPeriodSelect.value));
        }
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–æ–ª–µ—Å–∞ –º—ã—à–∏ –∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ (–∫–∞–∫ –≤ TradingView)
        this.productivityChart.addEventListener('wheel', (e) => this.handleWheel(e));
        this.productivityChart.addEventListener('mousedown', (e) => this.handleMouseDown(e));
        this.productivityChart.addEventListener('mousemove', (e) => this.handleMouseMove(e));
        this.productivityChart.addEventListener('mouseup', (e) => this.handleMouseUp(e));

        // –ù–∞–≤–∏–≥–∞—Ü–∏—è/–∑—É–º –¥–ª—è –æ–±—â–µ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
        if (this.overallChartCanvas) {
            this.overallChartCanvas.addEventListener('wheel', (e) => this.handleWheelOverall(e));
            this.overallChartCanvas.addEventListener('mousedown', (e) => this.handleMouseDownOverall(e));
            this.overallChartCanvas.addEventListener('mousemove', (e) => this.handleMouseMoveOverall(e));
            this.overallChartCanvas.addEventListener('mouseup', (e) => this.handleMouseUpOverall(e));
        }
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –º—ã—à–∏ –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        this.isDragging = false;
        this.lastMouseX = 0;
        this.isDraggingOverall = false;
        this.lastMouseXOverall = 0;
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        document.addEventListener('keydown', (e) => this.handleKeyDown(e));
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞/–∏–º–ø–æ—Ä—Ç–∞
        this.exportButton.addEventListener('click', () => this.exportData());
        this.importButton.addEventListener('click', () => this.importFileInput.click());
        this.importFileInput.addEventListener('change', (e) => this.importData(e));
        if (this.clearAllValuesButton) this.clearAllValuesButton.addEventListener('click', () => this.clearAllValues());
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –ø–∞–Ω–µ–ª–∏
        this.closeDetailPanel.addEventListener('click', () => this.closeDetailView());
        this.detailCategorySelect.addEventListener('change', () => this.changeDetailDirectionCategory());
        this.detailAddScoreButton.addEventListener('click', () => this.addDetailScore());
        this.detailDeleteButton.addEventListener('click', () => this.deleteDetailDirection());
        if (this.detailClearAllScoresButton) this.detailClearAllScoresButton.addEventListener('click', () => this.clearAllScoresOfCurrentDirection());
        this.detailScoreInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                this.addDetailScore();
            }
        });
        if (this.saveDescriptionButton) this.saveDescriptionButton.addEventListener('click', () => this.saveDetailDescription());
        if (this.detailColorPicker) this.detailColorPicker.addEventListener('click', (e) => this.handleColorPick(e));
        // no-op: percent picker and custom style are removed

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        const saveScoring = () => this.saveCurrentDirectionScoring();
        if (this.detailFocusMaxPointsInput) this.detailFocusMaxPointsInput.addEventListener('change', saveScoring);
        if (this.detailTimeMaxMinutesInput) this.detailTimeMaxMinutesInput.addEventListener('change', saveScoring);
        if (this.detailTimeMaxPointsInput) this.detailTimeMaxPointsInput.addEventListener('change', saveScoring);
        if (this.detailResultMaxPointsInput) this.detailResultMaxPointsInput.addEventListener('change', saveScoring);
        if (this.detailTotalMaxPointsInput) this.detailTotalMaxPointsInput.addEventListener('change', saveScoring);

        // –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ
        const updatePreview = () => this.updateCalcPreview();
        if (this.calcFocusPercentInput) this.calcFocusPercentInput.addEventListener('input', updatePreview);
        if (this.calcMinutesInput) this.calcMinutesInput.addEventListener('input', updatePreview);
        if (this.calcResultPercentInput) this.calcResultPercentInput.addEventListener('input', updatePreview);
        if (this.calcApplyButton) this.calcApplyButton.addEventListener('click', () => this.applyCalcToCurrentDirection());

        // –ö–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–∞ —É–¥–∞–ª–µ–Ω—ã ‚Äî —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–¥–µ–ª –∑–∞–¥–∞—á

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if (this.addCategoryButton) {
            this.addCategoryButton.addEventListener('click', () => this.promptAddCategory());
        }

        // –ö–æ—Ä–∑–∏–Ω–∞
        this.trash = this.loadTrash();
        if (this.openTrashButton) this.openTrashButton.addEventListener('click', () => this.openTrash());
        if (this.closeTrashButton) this.closeTrashButton.addEventListener('click', () => this.closeTrash());
        if (this.emptyTrashButton) this.emptyTrashButton.addEventListener('click', () => this.emptyTrash());

        // –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ —Å–≤–µ—á–∞–º: –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–æ–¥–∞–ª–∫–∏
        if (this.closeCommentButton) this.closeCommentButton.addEventListener('click', () => this.closeCommentModal());
        if (this.saveCommentButton) this.saveCommentButton.addEventListener('click', () => this.saveCandleComment());
        if (this.deleteCommentButton) this.deleteCommentButton.addEventListener('click', () => this.deleteCandleComment());

        // –†–∞–∑–±–∏–≤–∫–∞ –æ–±—â–µ–π —Å–≤–µ—á–∏ ‚Äî –∑–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏
        if (this.closeBreakdownButton) this.closeBreakdownButton.addEventListener('click', () => this.closeBreakdownModal());
        if (this.closeBreakdownFooterButton) this.closeBreakdownFooterButton.addEventListener('click', () => this.closeBreakdownModal());

        // Auth events
        if (this.openAuthButton) this.openAuthButton.addEventListener('click', () => this.openAuthModal());
        if (this.closeAuthButton) this.closeAuthButton.addEventListener('click', () => this.closeAuthModal());
        if (this.signInButton) this.signInButton.addEventListener('click', () => this.handleSignIn());
        if (this.signUpButton) this.signUpButton.addEventListener('click', () => this.handleSignUp());
        if (this.logoutButton) this.logoutButton.addEventListener('click', () => this.handleLogout());
    }

    // ===== –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –æ–±–ª–∞—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è =====
    setupFirebase() {
        try {
            if (!window.FIREBASE_CONFIG) {
                this.updateAuthUI();
                return;
            }
            if (!this.firebase.app) {
                this.firebase.app = firebase.initializeApp(window.FIREBASE_CONFIG);
                this.firebase.auth = firebase.auth();
                this.firebase.db = firebase.firestore();
            }
            this.firebase.auth.onAuthStateChanged(async (user) => {
                this.currentUser = user || null;
                this.updateAuthUI();
                if (this.currentUser) {
                    // –ù–æ–≤—ã–π –≤—Ö–æ–¥: –æ—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–æ–≥–æ –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞
                    this.clearAllLocalData();
                    this.resetInMemoryStateToDefaults();
                    this.startCloudListener();
                    try {
                        await this.loadFromCloud();
                    } catch (e) {
                        console.error('Load from cloud failed:', e);
                    }
                } else {
                    // –í—ã—Ö–æ–¥: –æ—Ç–∫–ª—é—á–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    this.stopCloudListener();
                    this.clearAllLocalData();
                    this.resetInMemoryStateToDefaults();
                }
            });
        } catch (e) {
            console.error('Firebase init failed:', e);
            this.showNotification('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–±–ª–∞—á–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é', 'error');
        }
    }

    updateAuthUI() {
        const isAuthed = !!this.currentUser;
        if (this.authStatus) {
            if (isAuthed) {
                this.authStatus.textContent = `–í–æ—à–ª–∏: ${this.currentUser.email || this.currentUser.uid}`;
                this.authStatus.style.display = '';
            } else {
                this.authStatus.textContent = window.FIREBASE_CONFIG ? '–ù–µ –≤–æ—à–ª–∏' : '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞';
                this.authStatus.style.display = '';
            }
        }
        if (this.openAuthButton) this.openAuthButton.style.display = isAuthed ? 'none' : '';
        if (this.logoutButton) this.logoutButton.style.display = isAuthed ? '' : 'none';
        if (this.authModal && this.authModal.style.display !== 'none' && isAuthed) {
            this.closeAuthModal();
        }
    }

    openAuthModal() { if (this.authModal) this.authModal.style.display = 'flex'; }
    closeAuthModal() { if (this.authModal) this.authModal.style.display = 'none'; }

    async handleSignIn() {
        if (!this.firebase.auth) {
            this.showNotification('–û–±–ª–∞–∫–æ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ', 'error');
            return;
        }
        const email = (this.authEmailInput?.value || '').trim();
        const password = (this.authPasswordInput?.value || '').trim();
        if (!email || !password) {
            this.showNotification('–í–≤–µ–¥–∏—Ç–µ email –∏ –ø–∞—Ä–æ–ª—å', 'error');
            return;
        }
        try {
            await this.firebase.auth.signInWithEmailAndPassword(email, password);
            this.showNotification('–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω', 'success');
        } catch (e) {
            console.error(e);
            this.showNotification('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: ' + (e.message || ''), 'error');
        }
    }

    async handleSignUp() {
        if (!this.firebase.auth) {
            this.showNotification('–û–±–ª–∞–∫–æ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ', 'error');
            return;
        }
        const email = (this.authEmailInput?.value || '').trim();
        const password = (this.authPasswordInput?.value || '').trim();
        if (!email || !password) {
            this.showNotification('–í–≤–µ–¥–∏—Ç–µ email –∏ –ø–∞—Ä–æ–ª—å', 'error');
            return;
        }
        try {
            await this.firebase.auth.createUserWithEmailAndPassword(email, password);
            this.showNotification('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞', 'success');
            // –ü—Ä–∏ –ø–µ—Ä–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω–∏–º —Ç–µ–∫—É—â–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ–±–ª–∞–∫–æ
            this.scheduleCloudSave(0);
        } catch (e) {
            console.error(e);
            this.showNotification('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ' + (e.message || ''), 'error');
        }
    }

    async handleLogout() {
        if (!this.firebase.auth) return;
        try {
            await this.firebase.auth.signOut();
            this.showNotification('–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞', 'success');
        } catch (e) {
            console.error(e);
            this.showNotification('–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞: ' + (e.message || ''), 'error');
        }
    }

    getCloudDocRef() {
        if (!this.firebase.db || !this.currentUser) return null;
        return this.firebase.db.collection('productivityData').doc(this.currentUser.uid);
    }

    buildCloudPayload() {
        return {
            version: '1.1',
            updatedAt: new Date().toISOString(),
            lastUpdatedBy: this.instanceId,
            productivityData: {
                directions: this.directions,
                categories: this.categories,
                trash: this.trash,
                comments: this.loadComments(),
                layoutMode: this.layoutMode,
                zoomState: { visibleCandlesCount: this.zoomState?.visibleCandlesCount || 50 }
            }
        };
    }

    scheduleCloudSave(delayMs = 800) {
        if (!this.currentUser || !this.firebase.db) return;
        if (this.isApplyingRemote) return; // –Ω–µ –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —É–¥–∞–ª—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if (this.cloudSaveTimer) clearTimeout(this.cloudSaveTimer);
        this.cloudSaveTimer = setTimeout(() => this.saveToCloud().catch(()=>{}), delayMs);
    }

    async saveToCloud() {
        if (!this.currentUser || !this.firebase.db) return;
        const ref = this.getCloudDocRef();
        if (!ref) return;
        const payload = this.buildCloudPayload();
        await ref.set(payload, { merge: true });
        this.lastCloudSavedAt = Date.now();
        // –ù–µ —Å–ø–∞–º–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏, –Ω–æ –º–æ–∂–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å
        // this.showNotification('–î–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã', 'success');
    }

    async loadFromCloud() {
        const ref = this.getCloudDocRef();
        if (!ref) return;
        const snap = await ref.get();
        if (!snap.exists) {
            // –£ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö ‚Äî –æ—Å—Ç–∞–≤–∏–º –ø—É—Å—Ç–æ–µ –ª–æ–∫–∞–ª—å–Ω–æ, –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏ –Ω–µ –∑–∞–ª–∏–≤–∞–µ–º –Ω–∏—á—Ç–æ
            return;
        }
        const data = snap.data();
        const payload = data && data.productivityData;
        if (!payload) return;
        // –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –∏ –±–µ–∑ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏ –æ–±–ª–∞–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã–º–∏
        this.applyCloudPayload(payload, /*showToast*/true);
    }

    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ–±–ª–∞—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–¥–ª—è realtime)
    applyCloudPayload(payload, showToast = false) {
        if (!payload) return;
        this.isApplyingRemote = true;
        try {
            this.directions = Array.isArray(payload.directions) ? payload.directions : this.directions || [];
            this.categories = Array.isArray(payload.categories) && payload.categories.length ? payload.categories : (this.categories || []);
            this.trash = payload.trash && typeof payload.trash === 'object' ? payload.trash : (this.trash || { directions: [], categories: [] });
            if (payload.comments && typeof payload.comments === 'object') {
                this.saveComments(payload.comments);
            }
            if (payload.layoutMode === 'compact' || payload.layoutMode === 'horizontal') {
                this.layoutMode = payload.layoutMode;
                this.saveLayoutMode();
            }
            if (payload.zoomState && payload.zoomState.visibleCandlesCount) {
                this.zoomState.visibleCandlesCount = payload.zoomState.visibleCandlesCount;
                if (this.candlesCountSelect) this.candlesCountSelect.value = String(payload.zoomState.visibleCandlesCount);
            }
            // –û–±–Ω–æ–≤–ª—è–µ–º UI
            this.saveDirections(); // –¢—Ä–∏–≥–≥–µ—Ä–∏—Ç scheduleCloudSave, –Ω–æ –º—ã –Ω–µ —Ö–æ—Ç–∏–º –æ–±—Ä–∞—Ç–Ω–æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Å–µ—Ä–≤–µ—Ä —Å—Ä–∞–∑—É
            this.saveCategories();
            this.saveTrash();
            this.render();
            this.updateDetailCategorySelectIfOpen?.();
            this.updateDirectionSelect?.();
            this.updateChart?.();
            this.updateOverallChart?.();
            if (showToast) this.showNotification('–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –æ–±–ª–∞–∫–∞', 'success');
        } finally {
            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ save* –Ω–µ —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª–∏ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
            setTimeout(() => { this.isApplyingRemote = false; }, 100);
        }
    }

    // –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    clearAllLocalData() {
        const suffixes = [
            'productivityDirections',
            'productivityCategories',
            'productivityTrash',
            'productivityComments',
            'productivityTasks',
            'productivityTasksPlacement'
        ];
        const uid = (this.currentUser && this.currentUser.uid) ? this.currentUser.uid : 'guest';
        for (const s of suffixes) {
            try { localStorage.removeItem(`${s}:${uid}`); } catch(_) {}
        }
        // layoutMode –æ—Å—Ç–∞–≤–∏–º, —Ç.–∫. —ç—Ç–æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞, –Ω–æ –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å:
        // try { localStorage.removeItem('productivityLayoutMode'); } catch(_) {}
    }

    // –°–±—Ä–æ—Å –≤—Å–µ—Ö in-memory —Å—Ç—Ä—É–∫—Ç—É—Ä –∫ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º –ø—É—Å—Ç—ã–º
    resetInMemoryStateToDefaults() {
        this.directions = [];
        this.categories = [
            { id: 'daily100', name: '100% –µ–∂–µ–¥–Ω–µ–≤–Ω–æ!', icon: 'üî•', priority: 1 },
            { id: 'daily80', name: '80% –µ–∂–µ–¥–Ω–µ–≤–Ω–æ!', icon: '‚ö°', priority: 2 },
            { id: 'daily50', name: '50% –µ–∂–µ–¥–Ω–µ–≤–Ω–æ!', icon: 'üìà', priority: 3 },
            { id: 'other1', name: '–ü—Ä–æ—á–µ–µ 1', icon: 'üìù', priority: 4 },
            { id: 'other2', name: '–ü—Ä–æ—á–µ–µ 2', icon: 'üìã', priority: 5 },
            { id: 'other3', name: '–ü—Ä–æ—á–µ–µ 3', icon: 'üìä', priority: 6 },
            { id: 'other4', name: '–ü—Ä–æ—á–µ–µ 4', icon: 'üìå', priority: 7 }
        ];
        this.trash = { directions: [], categories: [] };
        this.tasks = {};
        this.render();
        this.updateChart?.();
        this.updateOverallChart?.();
    }

    // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ Firestore –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    startCloudListener() {
        if (!this.firebase.db || !this.currentUser) return;
        const ref = this.getCloudDocRef();
        if (!ref) return;
        this.stopCloudListener();
        this.cloudUnsubscribe = ref.onSnapshot((doc) => {
            if (!doc.exists) return;
            const data = doc.data();
            if (!data) return;
            // –ë–æ–ª—å—à–µ –Ω–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º ¬´—Å–≤–æ–∏¬ª –∏–∑–º–µ–Ω–µ–Ω–∏—è, –≤—Å–µ–≥–¥–∞ –ø—Ä–∏–º–µ–Ω—è–µ–º —Å–µ—Ä–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            const payload = data.productivityData;
            if (!payload) return;
            this.applyCloudPayload(payload, /*showToast*/false);
        }, (error) => {
            console.error('Cloud listener error:', error);
        });
    }

    stopCloudListener() {
        if (typeof this.cloudUnsubscribe === 'function') {
            try { this.cloudUnsubscribe(); } catch(_) {}
        }
        this.cloudUnsubscribe = null;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
    getDefaultScoring() {
        return {
            focusMaxPoints: 10,
            timeMaxMinutes: 60,
            timeMaxPoints: 6,
            resultMaxPoints: 5,
            totalMaxPoints: null
        };
    }
    loadDirectionScoring(direction) {
        return direction.scoring || this.getDefaultScoring();
    }
    saveCurrentDirectionScoring() {
        if (!this.currentDetailDirection) return;
        const s = this.loadDirectionScoring(this.currentDetailDirection);
        const toNum = (v) => {
            const n = parseFloat(v);
            return isNaN(n) ? null : n;
        };
        s.focusMaxPoints = toNum(this.detailFocusMaxPointsInput?.value) ?? s.focusMaxPoints;
        s.timeMaxMinutes = toNum(this.detailTimeMaxMinutesInput?.value) ?? s.timeMaxMinutes;
        s.timeMaxPoints = toNum(this.detailTimeMaxPointsInput?.value) ?? s.timeMaxPoints;
        s.resultMaxPoints = toNum(this.detailResultMaxPointsInput?.value) ?? s.resultMaxPoints;
        s.totalMaxPoints = toNum(this.detailTotalMaxPointsInput?.value);
        this.currentDetailDirection.scoring = s;
        this.saveDirections();
        this.updateCalcPreview();
        this.showNotification('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', 'success');
    }

    populateScoringUI(direction) {
        const s = this.loadDirectionScoring(direction);
        if (this.detailFocusMaxPointsInput) this.detailFocusMaxPointsInput.value = s.focusMaxPoints;
        if (this.detailTimeMaxMinutesInput) this.detailTimeMaxMinutesInput.value = s.timeMaxMinutes;
        if (this.detailTimeMaxPointsInput) this.detailTimeMaxPointsInput.value = s.timeMaxPoints;
        if (this.detailResultMaxPointsInput) this.detailResultMaxPointsInput.value = s.resultMaxPoints;
        if (this.detailTotalMaxPointsInput) this.detailTotalMaxPointsInput.value = s.totalMaxPoints ?? '';
    }

    // –ö–∞–ª—å–∫—É–ª—è—Ü–∏—è
    calculateSessionPoints(scoring, inputs) {
        const clamp = (x, min, max) => Math.max(min, Math.min(max, x));
        // –†–∞–∑—Ä–µ—à–∞–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã –¥–ª—è —Ñ–æ–∫—É—Å–∞ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (-100..100)
        const focusRatio = clamp((inputs.focusPercent || 0) / 100, -1, 1);
        const resultRatio = clamp((inputs.resultPercent || 0) / 100, -1, 1);
        const focus = focusRatio * (scoring.focusMaxPoints || 0);
        // –í—Ä–µ–º—è –æ—Å—Ç–∞—ë—Ç—Å—è –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º
        const timeRatio = scoring.timeMaxMinutes > 0 ? clamp((inputs.minutes || 0) / scoring.timeMaxMinutes, 0, 1) : 0;
        const timePts = timeRatio * (scoring.timeMaxPoints || 0);
        const result = resultRatio * (scoring.resultMaxPoints || 0);
        let total = focus + timePts + result;
        if (typeof scoring.totalMaxPoints === 'number' && scoring.totalMaxPoints >= 0) {
            total = Math.min(total, scoring.totalMaxPoints);
        }
        return { focus, time: timePts, result, total };
    }

    updateCalcPreview() {
        if (!this.currentDetailDirection || !this.calcPreview) return;
        const scoring = this.loadDirectionScoring(this.currentDetailDirection);
        const inputs = {
            focusPercent: parseFloat(this.calcFocusPercentInput?.value) || 0,
            minutes: parseFloat(this.calcMinutesInput?.value) || 0,
            resultPercent: parseFloat(this.calcResultPercentInput?.value) || 0
        };
        const r = this.calculateSessionPoints(scoring, inputs);
        this.calcPreview.textContent = `–°–æ—Å—Ä–µ–¥–æ—Ç–æ—á–µ–Ω–Ω–æ—Å—Ç—å: ${r.focus.toFixed(2)} | –í—Ä–µ–º—è: ${r.time.toFixed(2)} | –†–µ–∑—É–ª—å—Ç–∞—Ç: ${r.result.toFixed(2)} | –ò—Ç–æ–≥–æ: ${r.total.toFixed(2)}`;
    }

    applyCalcToCurrentDirection() {
        if (!this.currentDetailDirection) return;
        const scoring = this.loadDirectionScoring(this.currentDetailDirection);
        const inputs = {
            focusPercent: parseFloat(this.calcFocusPercentInput?.value) || 0,
            minutes: parseFloat(this.calcMinutesInput?.value) || 0,
            resultPercent: parseFloat(this.calcResultPercentInput?.value) || 0
        };
        const r = this.calculateSessionPoints(scoring, inputs);
        const total = Number.isFinite(r.total) ? r.total : 0;
        const newScore = {
            value: total,
            date: new Date().toISOString(),
            timestamp: Date.now(),
            meta: {
                type: 'sessionCalc',
                breakdown: r,
                inputs,
                scoring
            }
        };
        this.currentDetailDirection.scores.push(newScore);
        this.currentDetailDirection.totalScore = (this.currentDetailDirection.totalScore || 0) + total;
        this.saveDirections();
        this.renderDirectionsOnly();
        this.updateChart();
        this.updateCalcPreview();
        this.showNotification(`–ù–∞—á–∏—Å–ª–µ–Ω–æ ${total.toFixed(2)} –±–∞–ª–ª–æ–≤ –ø–æ —Å–µ—Å—Å–∏–∏`, 'success');
    }

    

    // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∏–∑ LocalStorage
    loadDirections() {
        const saved = localStorage.getItem(this.getStorageKey('productivityDirections'));
        const directions = saved ? JSON.parse(saved) : [];
        
        // –ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö - –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è scores, totalScore, category –∏ description –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        return directions.map(direction => ({
            ...direction,
            scores: direction.scores || [],
            totalScore: direction.totalScore || 0,
            category: direction.category || 'other1', // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ "–ü—Ä–æ—á–µ–µ 1"
            description: typeof direction.description === 'string' ? direction.description : '',
            color: direction.color || null
        }));
    }

    // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: —Ö—Ä–∞–Ω–µ–Ω–∏–µ
    loadCategories() {
        try {
            const saved = localStorage.getItem(this.getStorageKey('productivityCategories'));
            return saved ? JSON.parse(saved) : null;
        } catch (_) { return null; }
    }

    saveCategories() {
        try { localStorage.setItem(this.getStorageKey('productivityCategories'), JSON.stringify(this.categories)); } catch (_) {}
        if (this.currentUser) this.scheduleCloudSave();
    }

    // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚Äî —Å–æ–∑–¥–∞—ë–º fallback. –ï—Å–ª–∏ —É–¥–∞–ª—ë–Ω fallback, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π
    ensureValidCategories() {
        if (!Array.isArray(this.categories) || this.categories.length === 0) {
            this.categories = [{ id: 'other1', name: '–ü—Ä–æ—á–µ–µ 1', icon: 'üìù', priority: 1 }];
            this.saveCategories();
            return;
        }
        // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if (!this.categories.find(c => c.id === 'other1')) {
            const maxPriority = Math.max(...this.categories.map(c => c.priority || 0), 0);
            this.categories.push({ id: 'other1', name: '–ü—Ä–æ—á–µ–µ 1', icon: 'üìù', priority: maxPriority + 1 });
            this.saveCategories();
        }
    }

    // –ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π –≤ fallback
    reassignOrphanDirections() {
        const validIds = new Set(this.categories.map(c => c.id));
        let changed = false;
        this.directions.forEach(d => {
            if (!validIds.has(d.category)) {
                d.category = 'other1';
                changed = true;
            }
        });
        if (changed) this.saveDirections();
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –∑–∞–ø—Ä–æ—Å–æ–º –∏–º–µ–Ω–∏ –∏ —ç–º–æ–¥–∑–∏-–∏–∫–æ–Ω–∫–∏
    promptAddCategory() {
        const name = prompt('–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', '–ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è');
        if (!name) return;
        const icon = prompt('–ò–∫–æ–Ω–∫–∞ (—ç–º–æ–¥–∑–∏):', 'üìÅ') || 'üìÅ';
        const id = 'cat_' + Date.now();
        const priority = (this.categories[this.categories.length - 1]?.priority || 0) + 1;
        this.categories.push({ id, name: name.trim(), icon, priority });
        this.saveCategories();
        this.renderDirectionsOnly();
        this.updateDetailCategorySelectIfOpen();
        this.showNotification(`–ö–∞—Ç–µ–≥–æ—Ä–∏—è "${name}" –¥–æ–±–∞–≤–ª–µ–Ω–∞`, 'success');
    }

    promptRenameCategory(categoryId) {
        const cat = this.categories.find(c => c.id === categoryId);
        if (!cat) return;
        const newName = prompt('–ù–æ–≤–æ–µ –∏–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', cat.name);
        if (!newName || newName.trim() === cat.name) return;
        cat.name = newName.trim();
        this.saveCategories();
        this.renderDirectionsOnly();
        this.updateDetailCategorySelectIfOpen();
        this.showNotification('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞', 'success');
    }

    startInlineRenameCategory(categoryId, nameEl) {
        const cat = this.categories.find(c => c.id === categoryId);
        if (!cat) return;
        nameEl.setAttribute('contenteditable', 'true');
        nameEl.focus();
        const onFinish = () => {
            nameEl.removeAttribute('contenteditable');
            const text = nameEl.textContent.trim();
            if (text && text !== cat.name) {
                cat.name = text;
                this.saveCategories();
                this.updateDetailCategorySelectIfOpen();
                this.showNotification('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞', 'success');
            } else {
                nameEl.textContent = cat.name;
            }
            nameEl.removeEventListener('blur', onFinish);
            nameEl.removeEventListener('keydown', onKey);
        };
        const onKey = (e) => {
            if (e.key === 'Enter') { e.preventDefault(); nameEl.blur(); }
            if (e.key === 'Escape') { nameEl.textContent = cat.name; nameEl.blur(); }
        };
        nameEl.addEventListener('blur', onFinish);
        nameEl.addEventListener('keydown', onKey);
    }

    deleteCategory(categoryId) {
        const cat = this.categories.find(c => c.id === categoryId);
        if (!cat) return;
        if (categoryId === 'other1' && this.categories.length > 1) {
            this.showNotification('–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –±–∞–∑–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–ü—Ä–æ—á–µ–µ 1". –ü–µ—Ä–µ–∏–º–µ–Ω—É–π—Ç–µ –µ—ë –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.', 'error');
            return;
        }
        const dirs = this.directions.filter(d => d.category === categoryId).length;
        if (!confirm(`–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é "${cat.name}"?${dirs ? `\n–í –Ω–µ–π ${dirs} –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π. –û–Ω–∏ –±—É–¥—É—Ç –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ "–ü—Ä–æ—á–µ–µ 1".`: ''}`)) return;
        // –ü–µ—Ä–µ–Ω–æ—Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ fallback –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        const fallback = this.categories.find(c => c.id === 'other1') || this.categories[0];
        this.directions.forEach(d => { if (d.category === categoryId) d.category = fallback.id; });
        // –£–¥–∞–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–≤ –∫–æ—Ä–∑–∏–Ω—É)
        this.addToTrash({ type: 'category', item: cat });
        this.categories = this.categories.filter(c => c.id !== categoryId);
        this.saveCategories();
        this.saveDirections();
        this.renderDirectionsOnly();
        this.updateDetailCategorySelectIfOpen();
        this.showNotification('–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞', 'success');
    }

    updateDetailCategorySelectIfOpen() {
        if (this.directionDetailPanel && this.directionDetailPanel.style.display !== 'none' && this.currentDetailDirection) {
            this.detailCategorySelect.innerHTML = this.getCategoryOptions(this.currentDetailDirection.category);
        }
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ LocalStorage
    saveDirections() {
        localStorage.setItem(this.getStorageKey('productivityDirections'), JSON.stringify(this.directions));
        // –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ–±–ª–∞–∫–æ, –µ—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á—Ç–æ–±—ã –≥–æ—Å—Ç—å –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–ª –Ω–∏—á—å–∏ –¥–∞–Ω–Ω—ã–µ)
        if (this.currentUser) this.scheduleCloudSave();
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    addDirection() {
        const inputValue = this.directionInput.value.trim();
        
        if (inputValue === '') {
            this.showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è', 'error');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
        const isDuplicate = this.directions.some(
            direction => direction.name.toLowerCase() === inputValue.toLowerCase()
        );

        if (isDuplicate) {
            this.showNotification('–¢–∞–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', 'error');
            return;
        }

        // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        // –í—ã–±–∏—Ä–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        const fallbackCategory = this.categories.find(c => c.id === 'other1')?.id
            || (this.categories[0]?.id);

        const newDirection = {
            id: Date.now(),
            name: inputValue,
            createdAt: new Date().toISOString(),
            scores: [],
            totalScore: 0,
            category: fallbackCategory
        };

        this.directions.push(newDirection);
        this.saveDirections();
        this.directionInput.value = '';
        this.render();
        this.updateDirectionSelect();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–Ω–µ–≤–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
        const selectedPeriod = this.periodSelect.value;
        if (!['10s', '1m', '10m'].includes(selectedPeriod)) {
            this.updateChart();
        }
        
        this.showNotification(`–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ "${inputValue}" –¥–æ–±–∞–≤–ª–µ–Ω–æ!`, 'success');
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    deleteDirection(id) {
        const dir = this.directions.find(d => d.id === id);
        const directionName = dir?.name;
        if (dir) {
            this.addToTrash({ type: 'direction', item: dir });
        }
        this.directions = this.directions.filter(direction => direction.id !== id);
        this.saveDirections();
        this.saveTrash();
        this.render();
        this.updateDirectionSelect();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–Ω–µ–≤–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
        const selectedPeriod = this.periodSelect.value;
        if (!['10s', '1m', '10m'].includes(selectedPeriod)) {
            this.updateChart();
        }
        
        if (directionName) {
            this.showNotification(`–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ "${directionName}" —É–¥–∞–ª–µ–Ω–æ`, 'success');
        }
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    render() {
        this.directionsList.innerHTML = '';
        this.applyLayoutClass();
        
        if (this.directions.length === 0) {
            this.emptyState.classList.remove('hidden');
            if (this.chartSection) this.chartSection.style.display = 'none';
        } else {
            this.emptyState.classList.add('hidden');
            // –ù–µ –º–µ–Ω—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –≥—Ä–∞—Ñ–∏–∫–∞ –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –æ–Ω –Ω–µ –ø—Ä–æ–ø–∞–¥–∞–ª –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö
            
            // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            this.categories.forEach(category => {
                const categoryDirections = this.directions.filter(d => d.category === category.id);
                const categoryBlock = this.createCategoryBlock(category, categoryDirections);
                this.directionsList.appendChild(categoryBlock);
            });
        }
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –±–ª–æ–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    createCategoryBlock(category, directions) {
        const categoryDiv = document.createElement('div');
        categoryDiv.className = 'category-block';
        categoryDiv.setAttribute('data-category', category.id);
        
        const headerDiv = document.createElement('div');
        headerDiv.className = 'category-header';
        headerDiv.innerHTML = `
            <span class="category-icon">${category.icon}</span>
            <span class="category-name" data-editable="true">${category.name}</span>
            <span class="category-count">(${directions.length})</span>
            <div class="category-actions">
                <button class="category-action-btn" title="–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å" data-action="rename"><i class="fas fa-pen"></i></button>
                <button class="category-action-btn" title="–£–¥–∞–ª–∏—Ç—å" data-action="delete"><i class="fas fa-trash"></i></button>
            </div>
            <span class="chevron"><i class="fas fa-chevron-down"></i></span>
        `;

        // (—Ü–≤–µ—Ç–æ-–ø–∏–∫–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π —É–¥–∞–ª—ë–Ω)
        
        const contentDiv = document.createElement('div');
        contentDiv.className = 'category-content';
        
        if (directions.length === 0) {
            contentDiv.innerHTML = `
                <div class="category-empty">
                    –ü–æ–∫–∞ –Ω–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                </div>
            `;
        } else {
            const directionsDiv = document.createElement('div');
            directionsDiv.className = 'category-directions';
            
            const maxVisible = 12;
            const hasMore = directions.length > maxVisible;
            const visibleItems = directions.slice(0, maxVisible);
            const hiddenItems = directions.slice(maxVisible);

            visibleItems.forEach(direction => {
                const directionElement = this.createDirectionElement(direction);
                directionsDiv.appendChild(directionElement);
            });

            if (hasMore) {
                const moreChip = document.createElement('div');
                moreChip.className = 'show-more-chip';
                moreChip.textContent = `–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë (${hiddenItems.length})`;
                let expanded = false;
                moreChip.addEventListener('click', () => {
                    expanded = !expanded;
                    if (expanded) {
                        hiddenItems.forEach(direction => {
                            const el = this.createDirectionElement(direction);
                            el.classList.add('revealed');
                            directionsDiv.insertBefore(el, moreChip);
                        });
                        moreChip.textContent = '–°–∫—Ä—ã—Ç—å';
                    } else {
                        // —É–¥–∞–ª–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                        directionsDiv.querySelectorAll('.direction-item.revealed').forEach(el => el.remove());
                        moreChip.textContent = `–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë (${hiddenItems.length})`;
                    }
                });
                directionsDiv.appendChild(moreChip);
            }
            
            contentDiv.appendChild(directionsDiv);
        }
        
        categoryDiv.appendChild(headerDiv);
        categoryDiv.appendChild(contentDiv);
        
        // –°–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ/—Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫
        headerDiv.addEventListener('click', (e) => {
            const btn = e.target.closest('.category-action-btn');
            if (btn) {
                const action = btn.getAttribute('data-action');
                if (action === 'rename') this.promptRenameCategory(category.id);
                if (action === 'delete') this.deleteCategory(category.id);
                e.stopPropagation();
                return;
            }
            // —Å–≤–æ—Ä–∞—á–∏–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–µ –ø–æ –∫–Ω–æ–ø–∫–∞–º/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é
            if (e.target.closest('[contenteditable="true"]')) return;
            categoryDiv.classList.toggle('collapsed');
            contentDiv.style.display = categoryDiv.classList.contains('collapsed') ? 'none' : '';
        });

        // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ –∫–ª–∏–∫—É –Ω–∞ –∏–º—è
        const nameEl = headerDiv.querySelector('.category-name');
        nameEl.addEventListener('dblclick', (e) => {
            e.stopPropagation();
            this.startInlineRenameCategory(category.id, nameEl);
        });
        
        return categoryDiv;
    }

    // –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∫–ª–∞—Å—Å —Ä–∞–∑–º–µ—Ç–∫–∏ –∫ —Å–ø–∏—Å–∫—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
    applyLayoutClass() {
        if (!this.directionsList) return;
        this.directionsList.classList.remove('horizontal-directions', 'compact-directions');
        if (this.layoutMode === 'compact') {
            this.directionsList.classList.add('compact-directions');
        } else {
            this.directionsList.classList.add('horizontal-directions');
        }
    }

    loadLayoutMode() {
        try {
            const saved = localStorage.getItem('productivityLayoutMode');
            return saved === 'compact' ? 'compact' : 'horizontal';
        } catch (_) {
            return 'horizontal';
        }
    }

    saveLayoutMode() {
        try {
            localStorage.setItem('productivityLayoutMode', this.layoutMode);
        } catch (_) {}
        this.scheduleCloudSave();
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    createDirectionElement(direction) {
        const div = document.createElement('div');
        div.className = 'direction-item';
        if (direction.color) div.classList.add(`color-${direction.color}`);
        // –∫–∞—Å—Ç–æ–º-—Å—Ç–∏–ª—å —É–¥–∞–ª—ë–Ω
        div.setAttribute('data-id', direction.id);
        
        const totalScore = direction.totalScore || 0;
        const scoreClass = totalScore > 0 ? 'score-positive' : totalScore < 0 ? 'score-negative' : 'score-neutral';
        const scoreText = totalScore > 0 ? `+${totalScore}` : totalScore.toString();
        
        div.innerHTML = `
            <div class="direction-header">
                <div class="direction-info">
                    <div class="direction-name">üéØ ${this.escapeHtml(direction.name)}</div>
                    <div class="direction-score ${scoreClass}">
                        ${scoreText}
                    </div>
                </div>
                <div class="direction-actions">
                    <select class="category-select" onchange="tracker.changeDirectionCategory(${direction.id}, this.value)">
                        ${this.getCategoryOptions(direction.category)}
                    </select>
                    <div class="score-input-container">
                        <input 
                            type="number" 
                            class="score-input" 
                            placeholder="+11 –∏–ª–∏ -5"
                            id="scoreInput${direction.id}"
                        >
                        <button class="add-score-button" onclick="tracker.addScore(${direction.id})">
                            <i class="fas fa-plus"></i>
                        </button>
                    </div>
                    <button class="delete-button" onclick="tracker.deleteDirection(${direction.id})">
                        <i class="fas fa-trash"></i>
                    </button>
                </div>
            </div>
            <div class="direction-percent">${this.getDirectionPercentText(direction.color)}</div>
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –ø–∞–Ω–µ–ª–∏
        div.addEventListener('click', (e) => {
            // –ù–µ –∑–∞–∫—Ä—ã–≤–∞—Ç—å/—Å–±—Ä–∞—Å—ã–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º–∏ –∫–æ–Ω—Ç—Ä–æ–ª–∞–º–∏
            const target = e.target;
            if (target.closest('select') || target.closest('input') || target.closest('button')) {
                return;
            }
            this.openDetailView(direction.id);
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Enter –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –±–∞–ª–ª–æ–≤
        setTimeout(() => {
            const scoreInput = document.getElementById(`scoreInput${direction.id}`);
            if (scoreInput) {
                scoreInput.addEventListener('keypress', (e) => {
                    if (e.key === 'Enter') {
                        this.addScore(direction.id);
                    }
                });
            }
        }, 0);
        
        return div;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø—Ü–∏–π –¥–ª—è —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    getCategoryOptions(currentCategory) {
        return this.categories.map(category => 
            `<option value="${category.id}" ${category.id === currentCategory ? 'selected' : ''}>
                ${category.icon} ${category.name}
            </option>`
        ).join('');
    }

    // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    changeDirectionCategory(directionId, newCategory) {
        const direction = this.directions.find(d => d.id === directionId);
        if (!direction) return;
        
        direction.category = newCategory;
        this.saveDirections();
        this.render();
        
        const categoryName = this.categories.find(c => c.id === newCategory)?.name || newCategory;
        this.showNotification(`"${direction.name}" –ø–µ—Ä–µ–º–µ—â–µ–Ω–æ –≤ "${categoryName}"`, 'success');
    }

    // –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }

    // –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    showNotification(message, type) {
        // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        const existingNotifications = document.querySelectorAll('.notification');
        existingNotifications.forEach(notification => notification.remove());

        const notification = document.createElement('div');
        notification.className = `notification ${type}`;
        notification.textContent = message;
        
        // –°—Ç–∏–ª–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 25px;
            border-radius: 10px;
            color: white;
            font-weight: 500;
            z-index: 1000;
            max-width: 300px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
            transform: translateX(100%);
            transition: transform 0.3s ease;
            ${type === 'error' 
                ? 'background: linear-gradient(45deg, #ff6b6b, #ee5a52);' 
                : 'background: linear-gradient(45deg, #51cf66, #40c057);'
            }
        `;

        document.body.appendChild(notification);

        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        setTimeout(() => {
            notification.style.transform = 'translateX(0)';
        }, 100);

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            notification.style.transform = 'translateX(100%)';
            setTimeout(() => notification.remove(), 300);
        }, 3000);
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤ –∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é
    addScore(directionId) {
        const scoreInput = document.getElementById(`scoreInput${directionId}`);
        const scoreValue = parseInt(scoreInput.value);
        
        if (isNaN(scoreValue) || scoreValue === 0) {
            this.showNotification('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤', 'error');
            return;
        }
        
        const direction = this.directions.find(d => d.id === directionId);
        if (!direction) return;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –±–∞–ª–ª —Å –¥–∞—Ç–æ–π
        const newScore = {
            value: scoreValue,
            date: new Date().toISOString(),
            timestamp: Date.now()
        };
        
        direction.scores.push(newScore);
        direction.totalScore = (direction.totalScore || 0) + scoreValue;
        
        this.saveDirections();
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–ø–∏—Å–æ–∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –±–µ–∑ —Å–∫—Ä—ã—Ç–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
        this.renderDirectionsOnly();
        
        // –ù–ï –æ–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±–∞–ª–ª–æ–≤ –¥–ª—è —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤!
        // –ì—Ä–∞—Ñ–∏–∫ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
        const selectedPeriod = this.periodSelect.value;
        // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è –ª—é–±–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞, –Ω–µ —Ä–∞–∑—Ä—É—à–∞—è –≤—ã–±–æ—Ä
            this.updateChart();
        
        scoreInput.value = '';
        
        const action = scoreValue > 0 ? '–¥–æ–±–∞–≤–ª–µ–Ω—ã' : '–≤—ã—á—Ç–µ–Ω—ã';
        const absValue = Math.abs(scoreValue);
        this.showNotification(`${absValue} –±–∞–ª–ª–æ–≤ ${action} –∫ "${direction.name}"`, 'success');
    }

    // –ß–∞—Å—Ç–∏—á–Ω—ã–π —Ä–µ—Ä–µ–Ω–¥–µ—Ä —Ç–æ–ª—å–∫–æ —Å–ø–∏—Å–∫–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π (–±–µ–∑ —Ç—Ä–æ–≥–∞–Ω–∏—è —Å–µ–∫—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞)
    renderDirectionsOnly() {
        this.directionsList.innerHTML = '';
        this.applyLayoutClass();
        this.categories.forEach(category => {
            const categoryDirections = this.directions.filter(d => d.category === category.id);
            const categoryBlock = this.createCategoryBlock(category, categoryDirections);
            this.directionsList.appendChild(categoryBlock);
        });
        this.emptyState.classList.toggle('hidden', this.directions.length > 0);
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
    updateDirectionSelect() {
        const prev = this.directionSelect.value;
        this.directionSelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</option>';
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–ø—Ü–∏—è: —Å—É–º–º–∞ –≤—Å–µ—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
        const allOpt = document.createElement('option');
        allOpt.value = 'ALL';
        allOpt.textContent = '–í—Å–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è (—Å—É–º–º–∞)';
        this.directionSelect.appendChild(allOpt);
        
        this.directions.forEach(direction => {
            const option = document.createElement('option');
            option.value = direction.id;
            option.textContent = direction.name;
            this.directionSelect.appendChild(option);
        });
        // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤—ã–±–æ—Ä, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ
        if (prev && (prev === 'ALL' || this.directions.some(d => String(d.id) === String(prev)))) {
            this.directionSelect.value = prev;
        }
    }

    // ===== –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ —Å–≤–µ—á–∞–º =====
    getCandleKey(rawCandle) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º "–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ|period|–≤—Ä–µ–º—è-–∏–Ω—Ç–µ—Ä–≤–∞–ª–∞"
        const dirId = this.directionSelect.value || 'dir';
        const period = this.periodSelect.value || 'period';
        // –î–ª—è —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ —É –Ω–∞—Å –µ—Å—Ç—å intervalStart; –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º x
        const ts = rawCandle.intervalStart ? new Date(rawCandle.intervalStart).getTime() : new Date(rawCandle.x).getTime();
        return `${dirId}|${period}|${ts}`;
    }
    loadComments() {
        try { return JSON.parse(localStorage.getItem(this.getStorageKey('productivityComments')) || '{}'); } catch(_) { return {}; }
    }
    saveComments(map) {
        try { localStorage.setItem(this.getStorageKey('productivityComments'), JSON.stringify(map)); } catch(_) {}
        if (this.currentUser) this.scheduleCloudSave();
    }
    getCandleComment(key) {
        const map = this.loadComments();
        return map[key] || '';
    }
    setCandleComment(key, text) {
        const map = this.loadComments();
        if (text && text.trim().length) {
            map[key] = text.trim();
        } else {
            delete map[key];
        }
        this.saveComments(map);
    }
    openCommentModal(key, rawCandle) {
        this.currentCommentKey = key;
        const dateStr = rawCandle.intervalStart ? new Date(rawCandle.intervalStart).toLocaleString('ru-RU') : new Date(rawCandle.x).toLocaleString('ru-RU');
        if (this.commentModalTitle) this.commentModalTitle.textContent = `–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Å–≤–µ—á–µ ${dateStr}`;
        const existing = this.getCandleComment(key);
        if (this.commentText) this.commentText.value = existing;
        if (this.commentInfo) this.commentInfo.textContent = existing ? '–ï—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ‚Äî –º–æ–∂–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.' : '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –Ω–µ—Ç ‚Äî –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π.';
        if (this.deleteCommentButton) this.deleteCommentButton.style.display = existing ? '' : 'none';
        if (this.commentModal) this.commentModal.style.display = 'flex';
    }
    closeCommentModal() {
        if (this.commentModal) this.commentModal.style.display = 'none';
        this.currentCommentKey = null;
    }
    saveCandleComment() {
        if (!this.currentCommentKey) return;
        const text = (this.commentText?.value) || '';
        this.setCandleComment(this.currentCommentKey, text);
        this.closeCommentModal();
        // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
        this.updateChartWithZoom();
        this.showNotification('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω', 'success');
    }
    deleteCandleComment() {
        if (!this.currentCommentKey) return;
        this.setCandleComment(this.currentCommentKey, '');
        this.closeCommentModal();
        this.updateChartWithZoom();
        this.showNotification('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É–¥–∞–ª—ë–Ω', 'success');
    }
    applyCommentStyles(candles) {
        // –ó–¥–µ—Å—å –Ω–µ–ª—å–∑—è –Ω–∞–ø—Ä—è–º—É—é –∫—Ä–∞—Å–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–≤–µ—á–∏, –Ω–æ –º—ã –º–æ–∂–µ–º –ø–æ–º–µ—á–∞—Ç—å raw-–æ–±—ä–µ–∫—Ç—ã —Ñ–ª–∞–≥–æ–º,
        // –∞ –≤ tooltip —É–∂–µ –ø–æ–∫–∞–∑–∞–ª–∏, —á—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –µ—Å—Ç—å. –ü–ª—é—Å –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å.
        // –í –∫–∞—á–µ—Å—Ç–≤–µ –≤–∏–¥–∏–º–æ–≥–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º label-–¥–æ–±–∞–≤–∫—É –∫ tooltip (—É–∂–µ –µ—Å—Ç—å) –∏ bodyOpacity.
        const map = this.loadComments();
        const ds = this.chart.data.datasets[0];
        ds.data = candles.map(c => ({ ...c }));
        // –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º —Å—Ç–∏–ª—å —á–µ—Ä–µ–∑ —Å–∫—Ä—ã—Ç—É—é –º–µ—Ç–∫—É: –º–µ–Ω—è–µ–º —Ü–≤–µ—Ç —Å–≤–µ—á–∏, –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        const hasComment = (raw) => !!map[this.getCandleKey(raw)];
        ds.color = {
            up: 'rgba(76, 175, 80, 1.0)',
            down: 'rgba(244, 67, 54, 1.0)',
            unchanged: 'rgba(128, 128, 128, 1.0)'
        };
        ds.borderColor = ds.borderColor || {};
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —É–≤–µ–ª–∏—á–∏–º –Ω–µ–ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –≥—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —Å–≤–µ—á–µ–π —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º
        // Chartjs-financial –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Ü–≤–µ—Ç–æ–≤ –ø–æ —Å–≤–µ—á–∞–º, –ø–æ—ç—Ç–æ–º—É –æ—Å—Ç–∞–≤–∏–º tooltip-–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä.
        // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: –¥–æ–±–∞–≤–∏—Ç—å –≤—Ç–æ—Ä—É—é dataset –ø–æ–≤–µ—Ä—Ö –¥–ª—è –∏–∫–æ–Ω–æ–∫ ‚Äî –º–æ–∂–Ω–æ –ø–æ–∑–∂–µ.
        return;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —è–ø–æ–Ω—Å–∫–∏—Ö —Å–≤–µ—á–µ–π —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º–∏
    getChartData(directionId, period) {
        const fullData = this.getFullChartData(directionId, period);
        if (!fullData) return null;
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –∑—É–º - —Ñ–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É –¥–∏–∞–ø–∞–∑–æ–Ω—É
        const filteredData = directionId === 'ALL'
            ? this.applyZoomFilter(fullData, true)
            : this.applyZoomFilter(fullData, false);
        // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–≤–µ—á–µ–π –≤ –¥–∞–Ω–Ω—ã—Ö (safety cap)
        const cap = this.maxRenderedCandles || 800;
        if (filteredData && filteredData.candlestickData && filteredData.candlestickData.length > cap) {
            filteredData.candlestickData = filteredData.candlestickData.slice(-cap);
        }
        return filteredData;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∑—É–º–∞ (—Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ø–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª—É)
    getFullChartData(directionId, period) {
        const cacheKey = this.getCacheKey(directionId, period);
        if (cacheKey && this.candlesCache.has(cacheKey)) {
            return this.candlesCache.get(cacheKey);
        }

        // –û–±—â–∏–π –≥—Ä–∞—Ñ–∏–∫: –∞–≥—Ä–µ–≥–∏—Ä—É–µ–º –≤—Å–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–∫ –æ–¥–Ω–æ
        if (directionId === 'ALL') {
            const allScores = [];
            const liveIds = new Set(this.directions.map(d => d.id));
            // –¢–µ–∫—É—â–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            this.directions.forEach(d => (d.scores || []).forEach(s => allScores.push({ ...s, _sourceDirectionId: d.id, _sourceDirectionName: d.name })));
            // –£–¥–∞–ª—ë–Ω–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–∫–æ—Ä–∑–∏–Ω–∞), –Ω–µ –¥—É–±–ª–∏—Ä—É–µ–º id
            if (this.trash && Array.isArray(this.trash.directions)) {
                this.trash.directions.forEach(td => {
                    if (liveIds.has(td.id)) return;
                    (td.scores || []).forEach(s => allScores.push({ ...s, _sourceDirectionId: td.id, _sourceDirectionName: td.name }));
                });
            }
            if (!allScores.length) return null;
            const direction = { id: 'ALL', name: '–í—Å–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è (—Å—É–º–º–∞)', scores: allScores };
            const result = this.buildCandlesForDirection(direction, period);
            if (result && cacheKey) this.candlesCache.set(cacheKey, result);
            return result;
        }

        const direction = this.directions.find(d => d.id == directionId);
        if (!direction || !direction.scores.length) return null;
        const result = this.buildCandlesForDirection(direction, period);
        if (result && cacheKey) this.candlesCache.set(cacheKey, result);
        return result;
    }

    getCacheKey(directionId, period) {
        const intervalMs = this.getIntervalMs(period);
        if (!intervalMs) return `${directionId}|${period}`;
        const now = Date.now();
        const currentIntervalStart = Math.floor(now / intervalMs) * intervalMs;
        return `${directionId}|${period}|${currentIntervalStart}`;
    }

    getIntervalMs(period) {
        const minute = 60 * 1000; const hour = 60 * minute; const day = 24 * hour;
        const map = {
            '10s': 10 * 1000,
            '1m': 1 * minute,
            '5m': 5 * minute,
            '30m': 30 * minute,
            '1h': 1 * hour,
            '2h': 2 * hour,
            '6h': 6 * hour,
            '12h': 12 * hour,
            '1d': 1 * day,
            '3d': 3 * day,
            '7d': 7 * day,
            '10d': 10 * day,
            '1M': 30 * day,
            '3M': 90 * day,
            '6M': 180 * day,
            '1Y': 365 * day
        };
        return map[period] || null;
    }

    buildCandlesForDirection(direction, period) {
        const now = new Date();
        const minute = 60 * 1000;
        const hour = 60 * minute;
        const day = 24 * hour;
        const periodConfig = {
            '10s': { interval: 10 * 1000, showLast: Infinity, unit: 'second' },
            '1m':  { interval: 1 * minute, showLast: Infinity, unit: 'minute' },
            '5m':  { interval: 5 * minute, showLast: Infinity, unit: 'minute' },
            '30m': { interval: 30 * minute, showLast: Infinity, unit: 'minute' },
            '1h':  { interval: 1 * hour, showLast: Infinity, unit: 'hour' },
            '2h':  { interval: 2 * hour, showLast: Infinity, unit: 'hour' },
            '6h':  { interval: 6 * hour, showLast: Infinity, unit: 'hour' },
            '12h': { interval: 12 * hour, showLast: Infinity, unit: 'hour' },
            '1d':  { interval: 1 * day, showLast: Infinity, unit: 'day' },
            '3d':  { interval: 3 * day, showLast: Infinity, unit: 'day' },
            '7d':  { interval: 7 * day, showLast: Infinity, unit: 'day' },
            '10d': { interval: 10 * day, showLast: Infinity, unit: 'day' },
            '1M':  { interval: 30 * day, showLast: Infinity, unit: 'month' },
            '3M':  { interval: 90 * day, showLast: Infinity, unit: 'month' },
            '6M':  { interval: 180 * day, showLast: Infinity, unit: 'month' },
            '1Y':  { interval: 365 * day, showLast: Infinity, unit: 'year' }
        };
        
        const config = periodConfig[period];
        if (!config) return null;
        
        const sortedScores = direction.scores
            .sort((a, b) => new Date(a.date) - new Date(b.date));
        
        if (!sortedScores.length) return null;
        
        let candlestickData = [];
        
        const isTimeframe = ['10s','1m','5m','30m','1h','2h','6h','12h','1d','3d','7d','10d','1M','3M','6M','1Y'].includes(period);
        if (isTimeframe) {
            // –¢–∞–π–º—Ñ—Ä–µ–π–º —Ä–µ–∂–∏–º - —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –≤—Ä–µ–º–µ–Ω–∏
            const intervalMs = config.interval;
            const currentTime = now.getTime();
            
            // –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—É—é —Ä–∞–Ω–Ω—é—é –∑–∞–ø–∏—Å—å –∏ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ –≥—Ä–∞–Ω–∏—Ü–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
            const firstScoreTime = new Date(sortedScores[0].date).getTime();
            const startTime = Math.floor(firstScoreTime / intervalMs) * intervalMs;
            
            // –°–æ–∑–¥–∞—ë–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
            let globalRunningTotal = 0;
            let intervalStart = startTime;
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –∫ —Ü–∏–∫–ª—É
            const currentIntervalStart = Math.floor(currentTime / intervalMs) * intervalMs;
            const endTime = Math.max(currentTime, currentIntervalStart + intervalMs);
            
            while (intervalStart <= currentIntervalStart && candlestickData.length < config.showLast) {
                const intervalEnd = intervalStart + intervalMs;
                
                // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –±–∞–ª–ª—ã –≤ —ç—Ç–æ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ
                const intervalScores = sortedScores.filter(score => {
                    const scoreTime = new Date(score.date).getTime();
                    return scoreTime >= intervalStart && scoreTime < intervalEnd;
                });
                
                // –°–æ–∑–¥–∞–µ–º —Å–≤–µ—á—É –í–°–ï–ì–î–ê –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ (–∫–∞–∫ –≤ TradingView)
                const open = globalRunningTotal;
                let runningTotalInInterval = globalRunningTotal;
                let high = globalRunningTotal;
                let low = globalRunningTotal;
                
                if (intervalScores.length > 0) {
                    // –ï—Å–ª–∏ –µ—Å—Ç—å –±–∞–ª–ª—ã - —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º High/Low
                    intervalScores.forEach(score => {
                        runningTotalInInterval += score.value;
                        high = Math.max(high, runningTotalInInterval);
                        low = Math.min(low, runningTotalInInterval);
                    });
                }
                // –ï—Å–ª–∏ –Ω–µ—Ç –±–∞–ª–ª–æ–≤ - –æ—Å—Ç–∞—é—Ç—Å—è open = close = high = low (doji —Å–≤–µ—á–∞)
                
                const close = runningTotalInInterval;
                const isCurrentInterval = intervalStart === currentIntervalStart;
                const isCompleted = !isCurrentInterval;
                
                candlestickData.push({
                    x: intervalStart,  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
                    o: open,
                    h: high,
                    l: low,
                    c: close,
                    intervalStart: new Date(intervalStart),
                    intervalEnd: new Date(intervalEnd),
                    scoresCount: intervalScores.length,
                    scoresInInterval: intervalScores,
                    totalChange: close - open,
                    isCompleted: isCompleted,
                    isActive: isCurrentInterval, // –¢–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –∞–∫—Ç–∏–≤–Ω—ã–π
                    isEmpty: intervalScores.length === 0 // –ü—É—Å—Ç–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (doji)
                });
                
                globalRunningTotal = close;
                intervalStart = intervalEnd;
            }
        } else {
            // –î–Ω–µ–≤–Ω–æ–π —Ä–µ–∂–∏–º - –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º
            const dailyGroups = Object.create(null);
            
            sortedScores.forEach(score => {
                const dateKey = new Date(score.date).toISOString().split('T')[0];
                if (!dailyGroups[dateKey]) {
                    dailyGroups[dateKey] = [];
                }
                dailyGroups[dateKey].push(score);
            });
            
            const sortedDates = Object.keys(dailyGroups).sort();
            let runningTotal = 0;
            
            const showDates = period === 'all' ? sortedDates : sortedDates.slice(-config.showLast);
            
            showDates.forEach(dateKey => {
                const dayScores = dailyGroups[dateKey].sort((a, b) => new Date(a.date) - new Date(b.date));
                const open = runningTotal;
                let dayRunningTotal = runningTotal;
                let high = runningTotal;
                let low = runningTotal;
                
                dayScores.forEach(score => {
                    dayRunningTotal += score.value;
                    high = Math.max(high, dayRunningTotal);
                    low = Math.min(low, dayRunningTotal);
                });
                
                const close = dayRunningTotal;
                
                candlestickData.push({
                    x: new Date(dateKey + 'T12:00:00'),
                    o: open,
                    h: high,
                    l: low,
                    c: close,
                    scoresCount: dayScores.length
                });
                
                runningTotal = close;
            });
        }
        
        return {
            candlestickData,
            directionName: direction.name,
            timeframe: period,
            intervalMs: config.interval
        };
    }

    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∑—É–º-—Ñ–∏–ª—å—Ç—Ä–∞ –∫ –¥–∞–Ω–Ω—ã–º (–∫–∞–∫ –≤ TradingView)
    applyZoomFilter(fullData, isOverall = false) {
        if (!fullData || !fullData.candlestickData.length) return fullData;
        
        const allCandles = fullData.candlestickData;
        const totalCandles = allCandles.length;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–∏–º—ã—Ö —Å–≤–µ—á–µ–π
        const zoom = isOverall ? this.overallZoomState : this.zoomState;
        const visibleCount = Math.min(zoom.visibleCandlesCount, totalCandles);
        
        let startIndex, endIndex;
        
        // –ï—Å–ª–∏ centerIndex –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–≤–µ—á–∏
        if (zoom.centerIndex === null) {
            endIndex = totalCandles - 1;
            startIndex = Math.max(0, endIndex - visibleCount + 1);
        } else {
            // –ï—Å–ª–∏ centerIndex —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
            const centerIndex = Math.min(zoom.centerIndex, totalCandles - 1);
            const halfVisible = Math.floor(visibleCount / 2);
            
            startIndex = Math.max(0, centerIndex - halfVisible);
            endIndex = Math.min(totalCandles - 1, startIndex + visibleCount - 1);
            
            // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
            if (endIndex - startIndex + 1 < visibleCount && startIndex > 0) {
                startIndex = Math.max(0, endIndex - visibleCount + 1);
            }
        }
        
        // –ù–ï –æ–±–Ω–æ–≤–ª—è–µ–º centerIndex –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —è–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const visibleCandles = allCandles.slice(startIndex, endIndex + 1);
        
        return {
            ...fullData,
            candlestickData: visibleCandles,
            zoomInfo: {
                startIndex,
                endIndex,
                totalCandles,
                visibleCount: visibleCandles.length
            }
        };
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –µ–¥–∏–Ω–∏—Ü—ã –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ—Å–∏ X
    getTimeUnit(period) {
        switch(period) {
            case '10s': return 'second';
            case '1m': 
            case '5m':
            case '30m': return 'minute';
            case '1h':
            case '2h':
            case '6h':
            case '12h': return 'hour';
            case '1d':
            case '3d':
            case '7d':
            case '10d': return 'day';
            case '1M':
            case '3M':
            case '6M': return 'month';
            case '1Y': return 'year';
            default: return 'minute';
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –æ—Å–∏ –≤—Ä–µ–º–µ–Ω–∏
    getTimeAxisLabel(period) {
        switch(period) {
            case '10s': return '10 —Å–µ–∫';
            case '1m': return '1 –º–∏–Ω';
            case '5m': return '5 –º–∏–Ω';
            case '30m': return '30 –º–∏–Ω';
            case '1h': return '1 —á';
            case '2h': return '2 —á';
            case '6h': return '6 —á';
            case '12h': return '12 —á';
            case '1d': return '1 –¥–µ–Ω—å';
            case '3d':
            case '7d':
            case '10d': return '–î–Ω–∏';
            case '1M':
            case '3M':
            case '6M': return '–ú–µ—Å—è—Ü—ã';
            case '1Y': return '–ì–æ–¥';
            default: return '–í—Ä–µ–º—è';
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
    updateChart() {
        const selectedDirection = this.directionSelect.value;
        const selectedPeriod = this.periodSelect.value;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ
        this.updateIntervalInfo(selectedPeriod);
        
        if (!selectedDirection || !this.directions.length) {
            if (this.chart) {
                this.chart.destroy();
                this.chart = null;
            }
            // –ù–µ —Å–∫—Ä—ã–≤–∞–µ–º –æ–±—â–∏–π –≥—Ä–∞—Ñ–∏–∫ ‚Äî –Ω–∞–æ–±–æ—Ä–æ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –∏–∑ directions + trash
            this.updateOverallChart();
            return;
        }
        
        const chartData = this.getChartData(selectedDirection, selectedPeriod);
        
        if (!chartData) {
            if (this.chart) {
                this.chart.destroy();
                this.chart = null;
            }
            return;
        }
        
        const ctx = this.productivityChart.getContext('2d');
        
        // –ü—Ä–æ—Å—Ç–æ —É–Ω–∏—á—Ç–æ–∂–∞–µ–º —Å—Ç–∞—Ä—ã–π –≥—Ä–∞—Ñ–∏–∫
        if (this.chart) {
            this.chart.destroy();
        }
        
        const self = this;
        this.chart = new Chart(ctx, {
            type: 'candlestick',
            data: {
                datasets: [{
                    label: `${chartData.directionName} - –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å`,
                    data: chartData.candlestickData,
                    // –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞ –¥–ª—è candlestick
                    color: {
                        up: 'rgba(76, 175, 80, 1.0)',      // –ó–µ–ª–µ–Ω—ã–π –¥–ª—è —Ä–æ—Å—Ç–∞
                        down: 'rgba(244, 67, 54, 1.0)',    // –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –ø–∞–¥–µ–Ω–∏—è
                        unchanged: 'rgba(128, 128, 128, 1.0)'
                    },
                    borderColor: {
                        up: 'rgba(56, 142, 60, 1.0)',      // –¢–µ–º–Ω–æ-–∑–µ–ª–µ–Ω–∞—è –≥—Ä–∞–Ω–∏—Ü–∞
                        down: 'rgba(211, 47, 47, 1.0)',    // –¢–µ–º–Ω–æ-–∫—Ä–∞—Å–Ω–∞—è –≥—Ä–∞–Ω–∏—Ü–∞
                        unchanged: 'rgba(96, 96, 96, 1.0)'
                    },
                    borderWidth: 2,
                    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —à–∏—Ä–∏–Ω—ã —Å–≤–µ—á–µ–π
                    barPercentage: 0.8,
                    categoryPercentage: 0.9
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                animation: false,
                devicePixelRatio: 1,
                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Ç–µ–º–Ω–∞—è —Ç–µ–º–∞ –∫–∞–∫ –Ω–∞ Bybit
                backgroundColor: '#0b0e11',
                layout: {
                    padding: 0
                },
                // –ö–ª–∏–∫ –ø–æ —Å–≤–µ—á–µ
                onClick: (evt, elements, chart) => {
                    try {
                        const points = chart.getElementsAtEventForMode(evt, 'nearest', { intersect: true }, false);
                        if (!points || !points.length) return;
                        const first = points[0];
                        const raw = chart.data.datasets[first.datasetIndex].data[first.index];
                        if (!raw) return;
                        const key = self.getCandleKey(raw);
                        self.openCommentModal(key, raw);
                    } catch (e) {
                        console.error('onClick candle error', e);
                    }
                },
                // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–ª–∞–≥–∏–Ω –¥–ª—è —á–µ—Ä–Ω–æ–≥–æ —Ñ–æ–Ω–∞
                plugins: [
                    {
                        id: 'darkBackground',
                        beforeDraw: function(chart) {
                            const ctx = chart.ctx;
                            ctx.save();
                            ctx.fillStyle = '#0b0e11';  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —á–µ—Ä–Ω—ã–π —Ñ–æ–Ω –∫–∞–∫ –Ω–∞ Bybit
                            ctx.fillRect(0, 0, chart.width, chart.height);
                            ctx.restore();
                        }
                    }
                ],
                plugins: {
                    title: {
                        display: true,
                        text: `–ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: ${chartData.directionName} (–Ø–ø–æ–Ω—Å–∫–∏–µ —Å–≤–µ—á–∏)`,
                        font: {
                            size: 16,
                            weight: 'bold'
                        },
                        color: '#f0f0f0'  // –°–≤–µ—Ç–ª—ã–π —Ç–µ–∫—Å—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–ª—è —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
                    },
                    legend: {
                        display: true,
                        position: 'top',
                        labels: {
                            filter: function(item, chart) {
                                return item.text !== undefined;
                            },
                            color: '#f0f0f0'  // –°–≤–µ—Ç–ª—ã–π —Ü–≤–µ—Ç –ª–µ–≥–µ–Ω–¥—ã
                        }
                    },
                                         tooltip: {
                         callbacks: {
                             title: function(context) {
                                 const date = context[0].parsed.x;
                                 const rawData = context[0].raw;
                                 
                                 if (selectedPeriod === '10s' || selectedPeriod === '1m' || selectedPeriod === '10m') {
                                     const start = rawData.intervalStart ? new Date(rawData.intervalStart).toLocaleTimeString('ru-RU') : '';
                                     const end = rawData.intervalEnd ? new Date(rawData.intervalEnd).toLocaleTimeString('ru-RU') : '';
                                     return `${start} - ${end}`;
                                 }
                                 return new Date(date).toLocaleDateString('ru-RU');
                             },
                             label: function(context) {
                                 const data = context.parsed;
                                 const rawData = context[0].raw;
                                 const change = data.c - data.o;
                                 const changeText = change > 0 ? `+${change}` : change.toString();
                                 
                                 let labels = [
                                     `–û—Ç–∫—Ä—ã—Ç–∏–µ: ${data.o}`,
                                     `–ú–∞–∫—Å–∏–º—É–º: ${data.h}`, 
                                     `–ú–∏–Ω–∏–º—É–º: ${data.l}`,
                                     `–ó–∞–∫—Ä—ã—Ç–∏–µ: ${data.c}`,
                                     `–ò–∑–º–µ–Ω–µ–Ω–∏–µ: ${changeText}`
                                 ];
                                 
                                 if (rawData.scoresCount !== undefined) {
                                     labels.push(`–ó–∞–ø–∏—Å–µ–π: ${rawData.scoresCount}`);
                                 }
                                 
                                 if (rawData.isActive) {
                                     labels.push(`üîµ –ê–ö–¢–ò–í–ù–´–ô –ò–ù–¢–ï–†–í–ê–õ`);
                                 } else if (rawData.isEmpty) {
                                     labels.push(`üì≠ –ü—É—Å—Ç–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (doji)`);
                                 } else {
                                     labels.push(`‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω`);
                                 }
                                 
                                 return labels;
                             }
                         }
                    },
                    // –î–æ–±–∞–≤–∏–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–ª–∏—á–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –≤ tooltip
                    tooltip: {
                        callbacks: {
                            afterBody: (items) => {
                                try {
                                    const p = items[0];
                                    const raw = p.raw;
                                    const key = self.getCandleKey(raw);
                                    const comment = self.getCandleComment(key);
                                    return comment ? ['–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: –µ—Å—Ç—å'] : [];
                                } catch (_) { return []; }
                            }
                        }
                     }
                },
                                scales: {
                    x: {
                        type: 'time',
                        time: {
                            unit: this.getTimeUnit(selectedPeriod),
                            displayFormats: {
                                second: 'HH:mm:ss',
                                minute: 'HH:mm',
                                day: 'dd/MM'
                            }
                        },
                        title: {
                            display: true,
                            text: this.getTimeAxisLabel(selectedPeriod),
                            color: '#f0f0f0'  // –°–≤–µ—Ç–ª—ã–π —Ü–≤–µ—Ç –ø–æ–¥–ø–∏—Å–∏ –æ—Å–∏ X
                        },
                        grid: {
                            color: '#1e2329',  // –û—á–µ–Ω—å —Ç–µ–º–Ω—ã–µ –ª–∏–Ω–∏–∏ —Å–µ—Ç–∫–∏ –∫–∞–∫ –Ω–∞ Bybit
                            display: true,
                            lineWidth: 0.5,    // –¢–æ–Ω–∫–∏–µ –ª–∏–Ω–∏–∏
                            drawBorder: false   // –£–±–∏—Ä–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—ã
                        },
                        ticks: {
                            source: 'data',
                            maxRotation: 0,
                            autoSkip: true,
                            maxTicksLimit: 15,
                            color: '#b7bdc6'  // –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∏ –∑–Ω–∞—á–µ–Ω–∏–π –æ—Å–∏ X
                        },
                        offset: true, // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø—ã –º–µ–∂–¥—É —Å–≤–µ—á–∞–º–∏
                        bounds: 'data'  // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –¥–∞–Ω–Ω—ã–º –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑—É–º–∞
                    },
                    y: {
                        title: {
                            display: true,
                            text: '–ë–∞–ª–ª—ã –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
                            color: '#f0f0f0'  // –°–≤–µ—Ç–ª—ã–π —Ü–≤–µ—Ç –ø–æ–¥–ø–∏—Å–∏ –æ—Å–∏ Y
                        },
                        grid: {
                            color: '#1e2329',  // –û—á–µ–Ω—å —Ç–µ–º–Ω—ã–µ –ª–∏–Ω–∏–∏ —Å–µ—Ç–∫–∏ –∫–∞–∫ –Ω–∞ Bybit
                            lineWidth: 0.5,    // –¢–æ–Ω–∫–∏–µ –ª–∏–Ω–∏–∏
                            drawBorder: false   // –£–±–∏—Ä–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—ã
                        },
                        ticks: {
                            color: '#b7bdc6',  // –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∏ –∑–Ω–∞—á–µ–Ω–∏–π –æ—Å–∏ Y
                            callback: function(value) {
                                return value > 0 ? '+' + value : value;
                            }
                        },
                        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–¥–≥–æ–Ω–∫–∞ –ø–æ–¥ –≤–∏–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∑—É–º–µ
                        bounds: 'data',
                        beginAtZero: false  // –ù–µ –∑–∞—Å—Ç–∞–≤–ª—è—Ç—å –Ω–∞—á–∏–Ω–∞—Ç—å —Å –Ω—É–ª—è –¥–ª—è –ª—É—á—à–µ–≥–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
                    }
                },
                                interaction: {
                    mode: 'index',
                    intersect: false
                },
                elements: {
                    candlestick: {
                        bodyWidth: 0.6,        // –®–∏—Ä–∏–Ω–∞ —Ç–µ–ª–∞ —Å–≤–µ—á–∏
                        wickWidth: 2,          // –®–∏—Ä–∏–Ω–∞ —Ç–µ–Ω–µ–π
                        borderWidth: 2,        // –¢–æ–ª—â–∏–Ω–∞ –≥—Ä–∞–Ω–∏—Ü—ã
                        wickBorderWidth: 2,    // –¢–æ–ª—â–∏–Ω–∞ –≥—Ä–∞–Ω–∏—Ü—ã —Ç–µ–Ω–µ–π
                        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –¥–µ–ª–∞–µ–º —Ç–µ–ª–∞ –Ω–µ–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º–∏
                        backgroundOpacity: 1.0,
                        borderOpacity: 1.0
                    }
                },
                layout: {
                    padding: {
                        left: 10,
                        right: 10,
                        top: 10,
                        bottom: 10
                    }
                }
            },
            // –ö–ª–∏–∫ –ø–æ —Å–≤–µ—á–µ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
            onClick(evt, activeEls) {
                const points = self.chart.getElementsAtEventForMode(evt, 'nearest', { intersect: true }, false);
                if (!points || !points.length) return;
                const first = points[0];
                const datasetIndex = first.datasetIndex;
                const index = first.index;
                const raw = self.chart.data.datasets[datasetIndex].data[index];
                if (!raw) return;
                const key = self.getCandleKey(raw);
                self.openCommentModal(key, raw);
             }
         });
         
         // –ù–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫ —É–∂–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –∑—É–º —á–µ—Ä–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö
        // –û–±–Ω–æ–≤–ª—è–µ–º/—Ä–∏—Å—É–µ–º –æ–±—â–∏–π –≥—Ä–∞—Ñ–∏–∫ –Ω–∏–∂–µ
        this.updateOverallChart();
    }

    // –°–æ–∑–¥–∞—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –æ–±—â–∏–π –≥—Ä–∞—Ñ–∏–∫ (ALL) –Ω–∏–∂–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ
    updateOverallChart(selectedPeriod) {
        // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–∏–π –≥—Ä–∞—Ñ–∏–∫, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º ALL –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –≥—Ä–∞—Ñ–∏–∫–µ
        if (this.directionSelect && this.directionSelect.value === 'ALL') {
            if (this.overallChart) { this.overallChart.destroy(); this.overallChart = null; }
            if (this.overallChartSection) this.overallChartSection.style.display = 'none';
            return;
        }
        if (!this.overallChartCanvas || !this.overallChartSection) return;
        const period = selectedPeriod || this.overallPeriodSelect?.value || this.periodSelect.value;
        const overallFull = this.getFullChartData('ALL', period);
        if (!overallFull || !overallFull.candlestickData || overallFull.candlestickData.length === 0) {
            // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤–æ–æ–±—â–µ ‚Äî —Å–∫—Ä—ã–≤–∞–µ–º
            if (this.overallChart) { this.overallChart.destroy(); this.overallChart = null; }
            this.overallChartSection.style.display = 'none';
            return;
        }

        // –ü–æ–∫–∞–∑–∞—Ç—å —Å–µ–∫—Ü–∏—é
        this.overallChartSection.style.display = 'block';

        const ctx = this.overallChartCanvas.getContext('2d');
        if (this.overallChart) {
            this.overallChart.destroy();
        }
        const self = this;
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π –∑—É–º –¥–ª—è –æ–±—â–µ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
        const filteredOverall = this.applyZoomFilter(overallFull, true);
        const cap = this.maxRenderedCandles || 800;
        const overallDataCandles = filteredOverall.candlestickData.slice(-cap);
        this.overallChart = new Chart(ctx, {
            type: 'candlestick',
            data: {
                datasets: [{
                    label: `${overallFull.directionName} - –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å`,
                    data: overallDataCandles,
                    color: { up: 'rgba(76, 175, 80, 1.0)', down: 'rgba(244, 67, 54, 1.0)', unchanged: 'rgba(128, 128, 128, 1.0)' },
                    borderColor: { up: 'rgba(56, 142, 60, 1.0)', down: 'rgba(211, 47, 47, 1.0)', unchanged: 'rgba(96, 96, 96, 1.0)' },
                    borderWidth: 2,
                    barPercentage: 0.8,
                    categoryPercentage: 0.9
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                animation: false,
                devicePixelRatio: 1,
                backgroundColor: '#0b0e11',
                onClick(evt, activeEls) {
                    const points = self.overallChart.getElementsAtEventForMode(evt, 'nearest', { intersect: true }, false);
                    if (!points || !points.length) return;
                    const first = points[0];
                    const raw = self.overallChart.data.datasets[first.datasetIndex].data[first.index];
                    if (!raw) return;
                    self.openBreakdownForOverallCandle(raw, period);
                },
                plugins: {
                    title: {
                        display: true,
                        text: `–û–±—â–∏–π –≥—Ä–∞—Ñ–∏–∫: ${overallFull.directionName}`,
                        font: { size: 16, weight: 'bold' },
                        color: '#f0f0f0'
                    },
                    legend: {
                        display: true,
                        position: 'top',
                        labels: { color: '#f0f0f0' }
                    },
                    tooltip: {
                        callbacks: {
                            title: (context) => {
                                const raw = context[0].raw;
                                if (['10s','1m','5m','30m','1h','2h','6h','12h','1d','3d','7d','10d','1M','3M','6M','1Y'].includes(period)) {
                                    const start = raw.intervalStart ? new Date(raw.intervalStart).toLocaleTimeString('ru-RU') : '';
                                    const end = raw.intervalEnd ? new Date(raw.intervalEnd).toLocaleTimeString('ru-RU') : '';
                                    return `${start} - ${end}`;
                                }
                                return new Date(context[0].parsed.x).toLocaleDateString('ru-RU');
                            },
                            label: (context) => {
                                const d = context.parsed;
                                const change = d.c - d.o;
                                const changeText = change > 0 ? `+${change}` : change.toString();
                                const raw = context.raw;
                                const base = [
                                    `–û—Ç–∫—Ä—ã—Ç–∏–µ: ${d.o}`,
                                    `–ú–∞–∫—Å–∏–º—É–º: ${d.h}`,
                                    `–ú–∏–Ω–∏–º—É–º: ${d.l}`,
                                    `–ó–∞–∫—Ä—ã—Ç–∏–µ: ${d.c}`,
                                    `–ò–∑–º–µ–Ω–µ–Ω–∏–µ: ${changeText}`
                                ];
                                if (raw && raw.scoresCount !== undefined) base.push(`–ó–∞–ø–∏—Å–µ–π: ${raw.scoresCount}`);
                                return base;
                            }
                        }
                    }
                },
                scales: {
                    x: {
                        type: 'time',
                        time: {
                            unit: this.getTimeUnit(selectedPeriod),
                            displayFormats: { second: 'HH:mm:ss', minute: 'HH:mm', day: 'dd/MM' }
                        },
                        title: { display: true, text: this.getTimeAxisLabel(selectedPeriod), color: '#f0f0f0' },
                        grid: { color: '#1e2329', display: true, lineWidth: 0.5, drawBorder: false },
                        ticks: { source: 'data', maxRotation: 0, autoSkip: true, maxTicksLimit: 15, color: '#b7bdc6' },
                        offset: true,
                        bounds: 'data'
                    },
                    y: {
                        title: { display: true, text: '–ë–∞–ª–ª—ã –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏', color: '#f0f0f0' },
                        grid: { color: '#1e2329', lineWidth: 0.5, drawBorder: false },
                        ticks: { color: '#b7bdc6', callback: (v) => (v > 0 ? '+' + v : v) },
                        bounds: 'data',
                        beginAtZero: false
                    }
                },
                interaction: { mode: 'index', intersect: false },
                elements: { candlestick: { bodyWidth: 0.6, wickWidth: 2, borderWidth: 2, wickBorderWidth: 2, backgroundOpacity: 1.0, borderOpacity: 1.0 } },
                layout: { padding: { left: 10, right: 10, top: 10, bottom: 10 } }
            }
        });
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –Ω–æ–≤—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π
    startChartAutoUpdate() {
        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
        if (this.chartUpdateTimer) {
            clearInterval(this.chartUpdateTimer);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É –¢–û–õ–¨–ö–û –¥–ª—è —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
        this.chartUpdateTimer = setInterval(() => {
            const selectedPeriod = this.periodSelect.value;
            if (!['10s', '1m', '10m'].includes(selectedPeriod)) {
                // –í—Å–µ —Ä–∞–≤–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞—à–∫—É –¥–ª—è –ø–µ—Ä–∏–æ–¥–æ–≤ >1m —Ä–∞–∑ –≤ 0.5—Å –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –¢–¢–õ
                this.updateIntervalInfo(selectedPeriod);
                // –ò —Ç–∞–∫–∂–µ –æ–±–Ω–æ–≤–∏–º –Ω–∏–∂–Ω—é—é –ø–ª–∞—à–∫—É, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –¥–ª—è –æ–±—â–µ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
                this.updateOverallIntervalInfo();
                return;
            }
                const selectedDirection = this.directionSelect.value;
            if (!selectedDirection || !this.chart) return;

            // –î–µ—à—ë–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–º–µ–Ω—ã –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞: –≤—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ä—Ç —Ç–µ–∫—É—â–µ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
            const info = this.getCurrentIntervalInfo(selectedPeriod);
            if (!info) return;
            const currentStartMs = info.intervalStart.getTime();
            if (this.lastIntervalStartMs === currentStartMs) return;
            this.lastIntervalStartMs = currentStartMs;

            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–º–∏ –±–µ–∑ —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
                    this.updateChartDataOnly();
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä –∑–∞–∫—Ä—ã—Ç–∏—è —Å–≤–µ—á–Ω–æ–π
            this.updateIntervalInfo(selectedPeriod);
            this.updateOverallIntervalInfo();
        }, 500);
    }

    updateOverallIntervalInfo() {
        const period = this.overallPeriodSelect?.value || this.periodSelect.value;
        if (!['10s','1m','5m','30m','1h','2h','6h','12h','1d','3d','7d','10d','1M','3M','6M','1Y'].includes(period)) {
            if (this.overallIntervalInfo) this.overallIntervalInfo.style.display = 'none';
            return;
        }
        const info = this.getCurrentIntervalInfo(period);
        if (!info || !this.overallIntervalInfo || !this.overallTimeLeftElement) return;
        const now = new Date();
        const end = info.intervalEnd;
        const diffMs = end - now;
        const sec = Math.max(0, Math.ceil(diffMs / 1000));
        const hh = Math.floor(sec / 3600);
        const mm = Math.floor((sec % 3600) / 60);
        const ss = sec % 60;
        const pad = (n) => String(n).padStart(2, '0');
        const label = `${info.periodName} ‚Ä¢ –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è: ${hh>0? pad(hh)+':':''}${pad(mm)}:${pad(ss)}`;
        this.overallIntervalInfo.style.display = 'block';
        this.overallTimeLeftElement.textContent = label;
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ
    updateIntervalInfo(period) {
        if (['10s','1m','5m','30m','1h','2h','6h','12h','1d','3d','7d','10d','1M','3M','6M','1Y'].includes(period)) {
            const info = this.getCurrentIntervalInfo(period);
            if (info && this.intervalInfo && this.timeLeftElement) {
                const now = new Date();
                const end = info.intervalEnd;
                const diffMs = end - now;
                const sec = Math.max(0, Math.ceil(diffMs / 1000));
                const hh = Math.floor(sec / 3600);
                const mm = Math.floor((sec % 3600) / 60);
                const ss = sec % 60;
                const pad = (n) => String(n).padStart(2, '0');
                const label = `${info.periodName} ‚Ä¢ –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è: ${hh>0? pad(hh)+':':''}${pad(mm)}:${pad(ss)}`;
                this.intervalInfo.style.display = 'block';
                this.timeLeftElement.textContent = label;
            }
        } else {
            if (this.intervalInfo) this.intervalInfo.style.display = 'none';
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –∞–∫—Ç–∏–≤–Ω–æ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ
    getCurrentIntervalInfo(period) {
        if (!['10s','1m','5m','30m','1h','2h','6h','12h','1d','3d','7d','10d','1M','3M','6M','1Y'].includes(period)) return null;
        
        const minute = 60 * 1000; const hour = 60 * minute; const day = 24 * hour;
        const periodConfig = {
            '10s': { interval: 10 * 1000, name: '10 —Å–µ–∫—É–Ω–¥' },
            '1m': { interval: 1 * minute, name: '1 –º–∏–Ω—É—Ç–∞' },
            '5m': { interval: 5 * minute, name: '5 –º–∏–Ω—É—Ç' },
            '30m': { interval: 30 * minute, name: '30 –º–∏–Ω—É—Ç' },
            '1h': { interval: 1 * hour, name: '1 —á–∞—Å' },
            '2h': { interval: 2 * hour, name: '2 —á–∞—Å–∞' },
            '6h': { interval: 6 * hour, name: '6 —á–∞—Å–æ–≤' },
            '12h': { interval: 12 * hour, name: '12 —á–∞—Å–æ–≤' },
            '1d': { interval: 1 * day, name: '1 –¥–µ–Ω—å' },
            '3d': { interval: 3 * day, name: '3 –¥–Ω—è' },
            '7d': { interval: 7 * day, name: '7 –¥–Ω–µ–π' },
            '10d': { interval: 10 * day, name: '10 –¥–Ω–µ–π' },
            '1M': { interval: 30 * day, name: '1 –º–µ—Å—è—Ü' },
            '3M': { interval: 90 * day, name: '3 –º–µ—Å—è—Ü–∞' },
            '6M': { interval: 180 * day, name: '6 –º–µ—Å—è—Ü–µ–≤' },
            '1Y': { interval: 365 * day, name: '1 –≥–æ–¥' }
        };
        
        const config = periodConfig[period];
        const now = new Date().getTime();
        const intervalMs = config.interval;
        
        // –ù–∞—Ö–æ–¥–∏–º –Ω–∞—á–∞–ª–æ —Ç–µ–∫—É—â–µ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        const currentIntervalStart = Math.floor(now / intervalMs) * intervalMs;
        const currentIntervalEnd = currentIntervalStart + intervalMs;
        const timeLeft = currentIntervalEnd - now;
        
        return {
            intervalStart: new Date(currentIntervalStart),
            intervalEnd: new Date(currentIntervalEnd),
            timeLeftMs: timeLeft,
            timeLeftSeconds: Math.ceil(timeLeft / 1000),
            periodName: config.name
        };
    }

    // –ú–µ—Ç–æ–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑—É–º–æ–º - –∫–∞–∫ –≤ TradingView (—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–º –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º)
    zoomIn() {
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–µ–Ω—Ç—Ä–∞
        const selectedDirection = this.directionSelect.value;
        const selectedPeriod = this.periodSelect.value;
        if (!selectedDirection) return;
        
        const fullData = this.getFullChartData(selectedDirection, selectedPeriod);
        if (!fullData) return;
        
        const totalCandles = fullData.candlestickData.length;
        
        // –ï—Å–ª–∏ centerIndex –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ –≤ —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é
        if (this.zoomState.centerIndex === null) {
            this.zoomState.centerIndex = totalCandles - Math.floor(this.zoomState.visibleCandlesCount / 2);
        }
        
        // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–∏–º—ã—Ö —Å–≤–µ—á–µ–π = –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ
        const newCount = Math.max(
            this.zoomState.minCandlesCount,
            Math.floor(this.zoomState.visibleCandlesCount * 0.7)
        );
        this.zoomState.visibleCandlesCount = newCount;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –∫ –±–ª–∏–∂–∞–π—à–µ–º—É –∑–Ω–∞—á–µ–Ω–∏—é
        this.updateCandlesCountSelector(newCount);
        
        // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º centerIndex —á—Ç–æ–±—ã –Ω–µ –≤—ã–π—Ç–∏ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã
        const halfVisible = Math.floor(newCount / 2);
        this.zoomState.centerIndex = Math.max(
            halfVisible,
            Math.min(totalCandles - 1 - halfVisible, this.zoomState.centerIndex)
        );
        
        this.updateChartWithZoom();
    }

     zoomInOverall() {
         const selectedPeriod = this.periodSelect.value;
         const fullData = this.getFullChartData('ALL', selectedPeriod);
         if (!fullData) return;
         const totalCandles = fullData.candlestickData.length;
         if (this.overallZoomState.centerIndex === null) {
             this.overallZoomState.centerIndex = totalCandles - Math.floor(this.overallZoomState.visibleCandlesCount / 2);
         }
         const newCount = Math.max(this.overallZoomState.minCandlesCount, Math.floor(this.overallZoomState.visibleCandlesCount * 0.7));
         this.overallZoomState.visibleCandlesCount = newCount;
         const halfVisible = Math.floor(newCount / 2);
         this.overallZoomState.centerIndex = Math.max(
             halfVisible,
             Math.min(totalCandles - 1 - halfVisible, this.overallZoomState.centerIndex)
         );
         this.updateOverallChart(selectedPeriod);
     }

    zoomOut() {
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–µ–Ω—Ç—Ä–∞
        const selectedDirection = this.directionSelect.value;
        const selectedPeriod = this.periodSelect.value;
        if (!selectedDirection) return;
        
        const fullData = this.getFullChartData(selectedDirection, selectedPeriod);
        if (!fullData) return;
        
        const totalCandles = fullData.candlestickData.length;
        
        // –ï—Å–ª–∏ centerIndex –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ –≤ —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é
        if (this.zoomState.centerIndex === null) {
            this.zoomState.centerIndex = totalCandles - Math.floor(this.zoomState.visibleCandlesCount / 2);
        }
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–∏–º—ã—Ö —Å–≤–µ—á–µ–π = –æ—Ç–¥–∞–ª–µ–Ω–∏–µ
        const newCount = Math.min(
            this.zoomState.maxCandlesCount,
            Math.floor(this.zoomState.visibleCandlesCount * 1.4)
        );
        this.zoomState.visibleCandlesCount = newCount;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –∫ –±–ª–∏–∂–∞–π—à–µ–º—É –∑–Ω–∞—á–µ–Ω–∏—é
        this.updateCandlesCountSelector(newCount);
        
        // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º centerIndex —á—Ç–æ–±—ã –Ω–µ –≤—ã–π—Ç–∏ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã
        const halfVisible = Math.floor(newCount / 2);
        this.zoomState.centerIndex = Math.max(
            halfVisible,
            Math.min(totalCandles - 1 - halfVisible, this.zoomState.centerIndex)
        );
        
        this.updateChartWithZoom();
    }

     zoomOutOverall() {
         const selectedPeriod = this.periodSelect.value;
         const fullData = this.getFullChartData('ALL', selectedPeriod);
         if (!fullData) return;
         const totalCandles = fullData.candlestickData.length;
         if (this.overallZoomState.centerIndex === null) {
             this.overallZoomState.centerIndex = totalCandles - Math.floor(this.overallZoomState.visibleCandlesCount / 2);
         }
         const newCount = Math.min(this.overallZoomState.maxCandlesCount, Math.floor(this.overallZoomState.visibleCandlesCount * 1.4));
         this.overallZoomState.visibleCandlesCount = newCount;
         const halfVisible = Math.floor(newCount / 2);
         this.overallZoomState.centerIndex = Math.max(
             halfVisible,
             Math.min(totalCandles - 1 - halfVisible, this.overallZoomState.centerIndex)
         );
         this.updateOverallChart(selectedPeriod);
     }

    resetZoom() {
        // –°–±—Ä–æ—Å –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–≤–µ—á–∏
        const selectedCount = parseInt(this.candlesCountSelect.value) || 50;
        this.zoomState.visibleCandlesCount = selectedCount;
        this.zoomState.centerIndex = null; // null –æ–∑–Ω–∞—á–∞–µ—Ç "–ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–≤–µ—á–∏"
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        if (this.candlesCountSelect.value !== selectedCount.toString()) {
            this.candlesCountSelect.value = selectedCount.toString();
        }
        
        this.updateChartWithZoom();
    }

     resetZoomOverall() {
         const selectedCount = parseInt(this.candlesCountSelect.value) || 50;
         this.overallZoomState.visibleCandlesCount = selectedCount;
         this.overallZoomState.centerIndex = null;
         this.updateOverallChart(this.periodSelect.value);
     }

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–∏–¥–∏–º—ã—Ö —Å–≤–µ—á–µ–π
    setCandlesCount() {
        const selectedCount = parseInt(this.candlesCountSelect.value);
        if (!selectedCount || selectedCount === this.zoomState.visibleCandlesCount) return;
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        const selectedDirection = this.directionSelect.value;
        const selectedPeriod = this.periodSelect.value;
        if (!selectedDirection) return;
        
        const fullData = this.getFullChartData(selectedDirection, selectedPeriod);
        if (!fullData) return;
        
        const totalCandles = fullData.candlestickData.length;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
        const oldCount = this.zoomState.visibleCandlesCount;
        this.zoomState.visibleCandlesCount = selectedCount;
        
        // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º centerIndex –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–≤–µ—á–µ–π
        if (this.zoomState.centerIndex !== null) {
            const halfVisible = Math.floor(selectedCount / 2);
            this.zoomState.centerIndex = Math.max(
                halfVisible,
                Math.min(totalCandles - 1 - halfVisible, this.zoomState.centerIndex)
            );
        }
        
        this.updateChartWithZoom();
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –∑—É–º–∞
    updateChartWithZoom() {
        if (this.frameScheduled) return;
        this.frameScheduled = true;
        setTimeout(() => {
            this.frameScheduled = false;
        if (!this.chart) return;
        const selectedDirection = this.directionSelect.value;
        const selectedPeriod = this.periodSelect.value;
        if (!selectedDirection) return;
        const chartData = this.getChartData(selectedDirection, selectedPeriod);
        if (!chartData) return;
        this.chart.data.datasets[0].data = chartData.candlestickData;
        this.chart.data.datasets[0].label = `${chartData.directionName} - –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å`;
        this.applyCommentStyles(chartData.candlestickData);
        this.chart.update('none');
        this.updateIntervalInfo(selectedPeriod);
        this.updatePositionIndicator(chartData);
        }, 0);
    }

        // –ù–û–í–´–ô –ú–ï–¢–û–î: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
    updateChartDataOnly() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∫–æ–Ω—Ü–µ –¥–∞–Ω–Ω—ã—Ö
        this.checkAndFollowNewData();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ —Å —É—á–µ—Ç–æ–º –∑—É–º–∞
        this.updateChartWithZoom();
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∞–≤—Ç–æ—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞ –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    checkAndFollowNewData() {
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const selectedDirection = this.directionSelect.value;
        const selectedPeriod = this.periodSelect.value;
        if (!selectedDirection) return;
        
        const fullData = this.getFullChartData(selectedDirection, selectedPeriod);
        if (!fullData) return;
        
        const totalCandles = fullData.candlestickData.length;
        
        // –ï—Å–ª–∏ centerIndex –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–º–æ—Ç—Ä–∏—Ç –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–≤–µ—á–∏
        if (this.zoomState.centerIndex === null) {
            return; // –£–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –Ω–∞ –∞–≤—Ç–æ—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±–ª–∏–∑–æ–∫ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫ –∫–æ–Ω—Ü—É –¥–∞–Ω–Ω—ã—Ö
        const halfVisible = Math.floor(this.zoomState.visibleCandlesCount / 2);
        const distanceFromEnd = totalCandles - 1 - this.zoomState.centerIndex;
        
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –æ—á–µ–Ω—å –±–ª–∏–∑–∫–æ –∫ –∫–æ–Ω—Ü—É (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ø–æ–ª–æ–≤–∏–Ω—ã —ç–∫—Ä–∞–Ω–∞)
        // —Ç–æ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ –∞–≤—Ç–æ—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞ –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        if (distanceFromEnd <= halfVisible) {
            this.zoomState.centerIndex = null; // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ —Ä–µ–∂–∏–º "–ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–≤–µ—á–∏"
        }
    }

     // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–µ—Å–∞ –º—ã—à–∏ (–∑—É–º –∫–∞–∫ –≤ TradingView)
     handleWheel(event) {
         event.preventDefault();
         
         // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–æ–∂–µ–Ω–∏–µ –º—ã—à–∏ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–æ—á–∫–∏ –∑—É–º–∞
          const rect = this.productivityChart.getBoundingClientRect();
         const mouseX = event.clientX - rect.left;
         const chartWidth = rect.width;
         const mousePosition = mouseX / chartWidth; // –û—Ç 0 –¥–æ 1
         
         // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–µ–Ω—Ç—Ä –∑—É–º–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–∑–∏—Ü–∏–∏ –º—ã—à–∏
         this.setZoomCenter(mousePosition);
         
         const delta = event.deltaY;
         if (delta < 0) {
             // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–≤–µ—Ä—Ö = –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ
             this.zoomIn();
         } else {
             // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑ = –æ—Ç–¥–∞–ª–µ–Ω–∏–µ
             this.zoomOut();
         }
     }

     // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ–±—â–µ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
     handleWheelOverall(event) {
         event.preventDefault();
         if (!this.overallChartCanvas || !this.overallChart) return;
         const rect = this.overallChartCanvas.getBoundingClientRect();
         const mouseX = event.clientX - rect.left;
         const chartWidth = rect.width;
         const mousePosition = mouseX / chartWidth;
         this.setZoomCenterOverall(mousePosition);
         const delta = event.deltaY;
         if (delta < 0) {
             this.zoomInOverall();
         } else {
             this.zoomOutOverall();
         }
     }

     // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–Ω—Ç—Ä–∞ –∑—É–º–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–∑–∏—Ü–∏–∏ –º—ã—à–∏
     setZoomCenter(mousePosition) {
         const selectedDirection = this.directionSelect.value;
         const selectedPeriod = this.periodSelect.value;
         if (!selectedDirection) return;
         
         const fullData = this.getFullChartData(selectedDirection, selectedPeriod);
         if (!fullData) return;
         
         const totalCandles = fullData.candlestickData.length;
         
         // –ï—Å–ª–∏ centerIndex –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –≤—ã—á–∏—Å–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Ü–µ–Ω—Ç—Ä
         if (this.zoomState.centerIndex === null) {
             this.zoomState.centerIndex = totalCandles - Math.floor(this.zoomState.visibleCandlesCount / 2);
         }
         
         // –í—ã—á–∏—Å–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –≥—Ä–∞–Ω–∏—Ü—ã –≤–∏–¥–∏–º—ã—Ö —Å–≤–µ—á–µ–π
         const halfVisible = Math.floor(this.zoomState.visibleCandlesCount / 2);
         const currentStart = Math.max(0, this.zoomState.centerIndex - halfVisible);
         const currentEnd = Math.min(totalCandles - 1, currentStart + this.zoomState.visibleCandlesCount - 1);
         
         // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–π —Ü–µ–Ω—Ç—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–∑–∏—Ü–∏–∏ –º—ã—à–∏
         const targetIndex = Math.floor(currentStart + mousePosition * (currentEnd - currentStart));
         this.zoomState.centerIndex = Math.max(
             halfVisible,
             Math.min(totalCandles - 1 - halfVisible, targetIndex)
         );
     }

     setZoomCenterOverall(mousePosition) {
         const selectedPeriod = this.periodSelect.value;
         const fullData = this.getFullChartData('ALL', selectedPeriod);
         if (!fullData) return;
         const totalCandles = fullData.candlestickData.length;
         if (this.overallZoomState.centerIndex === null) {
             this.overallZoomState.centerIndex = totalCandles - Math.floor(this.overallZoomState.visibleCandlesCount / 2);
         }
         const halfVisible = Math.floor(this.overallZoomState.visibleCandlesCount / 2);
         const currentStart = Math.max(0, this.overallZoomState.centerIndex - halfVisible);
         const currentEnd = Math.min(totalCandles - 1, currentStart + this.overallZoomState.visibleCandlesCount - 1);
         const targetIndex = Math.floor(currentStart + mousePosition * (currentEnd - currentStart));
         this.overallZoomState.centerIndex = Math.max(
             halfVisible,
             Math.min(totalCandles - 1 - halfVisible, targetIndex)
         );
     }

     // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –º—ã—à–∏ (–Ω–∞—á–∞–ª–æ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏)
     handleMouseDown(event) {
         if (event.button === 0) { // –õ–µ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –º—ã—à–∏
             this.isDragging = true;
             this.lastMouseX = event.clientX;
             this.productivityChart.style.cursor = 'grabbing';
         }
     }

     // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏ (–ø—Ä–æ–∫—Ä—É—Ç–∫–∞)
     handleMouseMove(event) {
         if (!this.isDragging) return;
         
         const deltaX = event.clientX - this.lastMouseX;
         this.lastMouseX = event.clientX;
         
         // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ (pan) - —Å–º–µ—â–µ–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
         this.panChart(deltaX);
     }

     // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è –º—ã—à–∏
     handleMouseUp(event) {
         if (this.isDragging) {
             this.isDragging = false;
             this.productivityChart.style.cursor = 'default';
         }
     }

     // –û–±—â–∏–π –≥—Ä–∞—Ñ–∏–∫: mouse handlers
     handleMouseDownOverall(event) {
         if (event.button === 0) {
             this.isDraggingOverall = true;
             this.lastMouseXOverall = event.clientX;
             this.overallChartCanvas.style.cursor = 'grabbing';
         }
     }
     handleMouseMoveOverall(event) {
         if (!this.isDraggingOverall) return;
         const deltaX = event.clientX - this.lastMouseXOverall;
         this.lastMouseXOverall = event.clientX;
         this.panOverallChart(deltaX);
     }
     handleMouseUpOverall(event) {
         if (this.isDraggingOverall) {
             this.isDraggingOverall = false;
             this.overallChartCanvas.style.cursor = 'default';
         }
     }

     // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ (–∫–∞–∫ –≤ TradingView)
     panChart(deltaPixels) {
         // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø–∏–∫—Å–µ–ª–∏ –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π
         const candlesPerPixel = Math.max(0.02, this.zoomState.visibleCandlesCount / 800); // –±–æ–ª–µ–µ –ø–ª–∞–≤–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞
         const candlesDelta = Math.round(deltaPixels * candlesPerPixel);
         
         // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥—Ä–∞–Ω–∏—Ü
         const selectedDirection = this.directionSelect.value;
         const selectedPeriod = this.periodSelect.value;
         if (!selectedDirection) return;
         
         const fullData = this.getFullChartData(selectedDirection, selectedPeriod);
         if (!fullData) return;
         
         const totalCandles = fullData.candlestickData.length;
         
         // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å
         if (this.zoomState.centerIndex === null) {
             this.zoomState.centerIndex = totalCandles - 1;
         }
         
         const newCenterIndex = Math.max(
             Math.floor(this.zoomState.visibleCandlesCount / 2),
             Math.min(
                 totalCandles - 1 - Math.floor(this.zoomState.visibleCandlesCount / 2),
                 this.zoomState.centerIndex - candlesDelta
             )
         );
         
                   this.zoomState.centerIndex = newCenterIndex;
          this.updateChartWithZoom();
      }

      panOverallChart(deltaPixels) {
          const candlesPerPixel = Math.max(0.02, this.overallZoomState.visibleCandlesCount / 800);
          const candlesDelta = Math.round(deltaPixels * candlesPerPixel);
          const selectedPeriod = this.periodSelect.value;
          const fullData = this.getFullChartData('ALL', selectedPeriod);
          if (!fullData) return;
          const totalCandles = fullData.candlestickData.length;
          if (this.overallZoomState.centerIndex === null) {
              this.overallZoomState.centerIndex = totalCandles - 1;
          }
          const newCenterIndex = Math.max(
              Math.floor(this.overallZoomState.visibleCandlesCount / 2),
              Math.min(
                  totalCandles - 1 - Math.floor(this.overallZoomState.visibleCandlesCount / 2),
                  this.overallZoomState.centerIndex - candlesDelta
              )
          );
          this.overallZoomState.centerIndex = newCenterIndex;
          this.updateOverallChart(selectedPeriod);
      }

      // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
      getNavigationStep() {
          return parseInt(this.navStepSelect.value) || 5;
      }

      // –ù–∞–≤–∏–≥–∞—Ü–∏—è –≤–ª–µ–≤–æ (–∫ –±–æ–ª–µ–µ —Å—Ç–∞—Ä—ã–º —Å–≤–µ—á–∞–º)
      navigateLeft() {
          const step = this.getNavigationStep();
          
          // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥—Ä–∞–Ω–∏—Ü
          const selectedDirection = this.directionSelect.value;
          const selectedPeriod = this.periodSelect.value;
          if (!selectedDirection) return;
          
          const fullData = this.getFullChartData(selectedDirection, selectedPeriod);
          if (!fullData) return;
          
          const totalCandles = fullData.candlestickData.length;
          
          // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º centerIndex –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
          if (this.zoomState.centerIndex === null) {
              this.zoomState.centerIndex = totalCandles - 1;
          }
          
          // –°–º–µ—â–∞–µ–º –≤–ª–µ–≤–æ (–∫ –±–æ–ª–µ–µ —Å—Ç–∞—Ä—ã–º –¥–∞–Ω–Ω—ã–º)
          const minCenterIndex = Math.floor(this.zoomState.visibleCandlesCount / 2);
          const newCenterIndex = Math.max(
              minCenterIndex,
              this.zoomState.centerIndex - step
          );
          
          this.zoomState.centerIndex = newCenterIndex;
          this.updateChartWithZoom();
      }

      // –ù–∞–≤–∏–≥–∞—Ü–∏—è –≤–ø—Ä–∞–≤–æ (–∫ –±–æ–ª–µ–µ –Ω–æ–≤—ã–º —Å–≤–µ—á–∞–º)
      navigateRight() {
          const step = this.getNavigationStep();
          
          // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥—Ä–∞–Ω–∏—Ü
          const selectedDirection = this.directionSelect.value;
          const selectedPeriod = this.periodSelect.value;
          if (!selectedDirection) return;
          
          const fullData = this.getFullChartData(selectedDirection, selectedPeriod);
          if (!fullData) return;
          
          const totalCandles = fullData.candlestickData.length;
          
          // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º centerIndex –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
          if (this.zoomState.centerIndex === null) {
              this.zoomState.centerIndex = totalCandles - 1;
          }
          
          // –°–º–µ—â–∞–µ–º –≤–ø—Ä–∞–≤–æ (–∫ –±–æ–ª–µ–µ –Ω–æ–≤—ã–º –¥–∞–Ω–Ω—ã–º)
          const maxCenterIndex = totalCandles - 1 - Math.floor(this.zoomState.visibleCandlesCount / 2);
          const newCenterIndex = Math.min(
              maxCenterIndex,
              this.zoomState.centerIndex + step
          );
          
          this.zoomState.centerIndex = newCenterIndex;
          this.updateChartWithZoom();
      }

             // –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ –ø–æ—Å–ª–µ–¥–Ω–∏–º —Å–≤–µ—á–∞–º
       navigateToEnd() {
           this.zoomState.centerIndex = null; // null –æ–∑–Ω–∞—á–∞–µ—Ç "–ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–≤–µ—á–∏"
           this.updateChartWithZoom();
       }

       // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
       handleKeyDown(event) {
           // –ù–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –∫–ª–∞–≤–∏—à–∏ –ø—Ä–∏ –≤–≤–æ–¥–µ –≤ –ø–æ–ª—è—Ö –≤–≤–æ–¥–∞/–≤—ã–±–æ—Ä–∞/—Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ–±–ª–∞—Å—Ç—è—Ö –∏–ª–∏ contenteditable
           const tag = event.target.tagName;
           if (tag === 'INPUT' || tag === 'SELECT' || tag === 'TEXTAREA' || event.target.isContentEditable) {
               return;
           }
           
           switch(event.key) {
               case 'ArrowLeft':
                   event.preventDefault();
                   this.navigateLeft();
                   break;
               case 'ArrowRight':
                   event.preventDefault();
                   this.navigateRight();
                   break;
               case 'Home':
                   event.preventDefault();
                   // –ü–µ—Ä–µ–π—Ç–∏ –∫ –Ω–∞—á–∞–ª—É –¥–∞–Ω–Ω—ã—Ö
                   this.navigateToStart();
                   break;
               case 'End':
                   event.preventDefault();
                   this.navigateToEnd();
                   break;
               case '=':
               case '+':
                   event.preventDefault();
                   this.zoomIn();
                   break;
               case '-':
                   event.preventDefault();
                   this.zoomOut();
                   break;
               case '0':
                   event.preventDefault();
                   this.resetZoom();
                   break;
           }
       }

               // –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ –Ω–∞—á–∞–ª—É –¥–∞–Ω–Ω—ã—Ö
        navigateToStart() {
            const halfVisible = Math.floor(this.zoomState.visibleCandlesCount / 2);
            this.zoomState.centerIndex = halfVisible;
            this.updateChartWithZoom();
        }

                 // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
         updatePositionIndicator(chartData) {
             if (!chartData || !chartData.zoomInfo || !this.positionIndicator) {
                 if (this.positionIndicator) {
                     this.positionIndicator.style.display = 'none';
                 }
                 return;
             }
             
             const { startIndex, endIndex, totalCandles, visibleCount } = chartData.zoomInfo;
             
             // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∑—É–º –∏–ª–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è
             if (visibleCount < totalCandles || startIndex > 0) {
                 this.positionIndicator.style.display = 'block';
                 this.positionText.textContent = 
                     `–ü–æ–∑–∏—Ü–∏—è: —Å–≤–µ—á–∏ ${startIndex + 1}-${endIndex + 1} –∏–∑ ${totalCandles} ‚Ä¢ –ó—É–º: ${visibleCount} —Å–≤–µ—á–µ–π`;
             } else {
                 this.positionIndicator.style.display = 'none';
             }
         }

         // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–≤–µ—á–µ–π –∫ –±–ª–∏–∂–∞–π—à–µ–º—É –∑–Ω–∞—á–µ–Ω–∏—é
         updateCandlesCountSelector(targetCount) {
             const options = [10, 25, 50, 100, 200, 300, 500, 1000, 10000];
             
             // –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
             const closest = options.reduce((prev, curr) => 
                 Math.abs(curr - targetCount) < Math.abs(prev - targetCount) ? curr : prev
             );
             
             // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
             if (this.candlesCountSelect.value !== closest.toString()) {
                 this.candlesCountSelect.value = closest.toString();
                 // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º
                 this.zoomState.visibleCandlesCount = closest;
             }
         }

    // –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ JSON —Ñ–∞–π–ª
    exportData() {
        try {
            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
            const exportData = {
                version: "1.1",
                exportDate: new Date().toISOString(),
                productivityData: {
                    directions: this.directions,
                    categories: this.categories,
                    trash: this.trash,
                    comments: this.loadComments(),
                    layoutMode: this.layoutMode,
                    zoomState: {
                        visibleCandlesCount: this.zoomState.visibleCandlesCount
                    }
                }
            };

            // –°–æ–∑–¥–∞–µ–º JSON —Å—Ç—Ä–æ–∫—É
            const jsonString = JSON.stringify(exportData, null, 2);
            
            // –°–æ–∑–¥–∞–µ–º blob –∏ —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            const blob = new Blob([jsonString], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            
            // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            const link = document.createElement('a');
            link.href = url;
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å –¥–∞—Ç–æ–π
            const now = new Date();
            const dateStr = now.toISOString().slice(0, 10); // YYYY-MM-DD
            const timeStr = now.toTimeString().slice(0, 5).replace(':', '-'); // HH-MM
            link.download = `productivity-tracker-${dateStr}-${timeStr}.json`;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ DOM, –∫–ª–∏–∫–∞–µ–º –∏ —É–¥–∞–ª—è–µ–º
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            
            // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–∞–º—è—Ç—å
            URL.revokeObjectURL(url);
            
            this.showNotification('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!', 'success');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö', 'error');
        }
    }

    // –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–∞
    importData(event) {
        const file = event.target.files[0];
        if (!file) return;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
        if (!file.name.endsWith('.json')) {
            this.showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ JSON —Ñ–∞–π–ª', 'error');
            return;
        }

        const reader = new FileReader();
        reader.onload = (e) => {
            try {
                const jsonData = JSON.parse(e.target.result);
                
                // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
                if (!this.validateImportData(jsonData)) {
                    this.showNotification('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã—Ö', 'error');
                    return;
                }

                // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞
                const confirmImport = confirm(
                    '–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞–º–µ–Ω–∏—Ç –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –∏—Ö –∏—Å—Ç–æ—Ä–∏—é. ' +
                    '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?'
                );

                if (!confirmImport) {
                    return;
                }

                const data = jsonData.productivityData || {};
                // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
                this.directions = Array.isArray(data.directions) ? data.directions : [];
                this.categories = Array.isArray(data.categories) && data.categories.length ? data.categories : (this.categories || []);
                this.trash = data.trash && typeof data.trash === 'object' ? data.trash : (this.trash || { directions: [], categories: [] });
                if (data.comments && typeof data.comments === 'object') {
                    this.saveComments(data.comments);
                }
                if (data.layoutMode === 'compact' || data.layoutMode === 'horizontal') {
                    this.layoutMode = data.layoutMode;
                    this.saveLayoutMode();
                }
                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑—É–º–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
                if (data.zoomState && data.zoomState.visibleCandlesCount) {
                    this.zoomState.visibleCandlesCount = data.zoomState.visibleCandlesCount;
                    if (this.candlesCountSelect) this.candlesCountSelect.value = data.zoomState.visibleCandlesCount.toString();
                }

                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö
                this.zoomState.centerIndex = null;

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
                this.saveDirections();
                this.saveCategories();
                this.saveTrash();
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                this.render();
                this.applyLayoutClass();
                this.updateDetailCategorySelectIfOpen();
                this.updateDirectionSelect();
                this.updateChart();

                this.showNotification(
                    `–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω: –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π ${this.directions.length}`, 
                    'success'
                );

            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:', error);
                this.showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã—Ö', 'error');
            } finally {
                // –û—á–∏—â–∞–µ–º input –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ —Ç–æ–≥–æ –∂–µ —Ñ–∞–π–ª–∞
                event.target.value = '';
            }
        };

        reader.readAsText(file);
    }

    // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∑–Ω–∞—á–µ–Ω–∏–π (–≤—Å–µ—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π)
    clearAllValues() {
        if (!confirm('–û—á–∏—Å—Ç–∏—Ç—å –í–°–ï –∑–Ω–∞—á–µ–Ω–∏—è —É –≤—Å–µ—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.')) return;
        // –û—á–∏—â–∞–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö
        this.directions.forEach(d => { d.scores = []; d.totalScore = 0; });
        // –û—á–∏—â–∞–µ–º –≤ –∫–æ—Ä–∑–∏–Ω–µ —É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π (—á—Ç–æ–±—ã –æ–±—â–∏–π –≥—Ä–∞—Ñ–∏–∫ —Ç–æ–∂–µ –æ–±–Ω—É–ª–∏–ª—Å—è)
        if (this.trash && Array.isArray(this.trash.directions)) {
            this.trash.directions.forEach(d => { d.scores = []; d.totalScore = 0; });
        }
        // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–µ—à
        this.candlesCache.clear();
        // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
        this.saveDirections();
        this.saveTrash();
        // –û–±–Ω–æ–≤–∏—Ç—å UI
        this.renderDirectionsOnly();
        this.updateChart();
        this.updateOverallChart();
        this.showNotification('–í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã', 'success');
    }

    // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    clearAllScoresOfCurrentDirection() {
        if (!this.currentDetailDirection) return;
        if (!confirm(`–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è —É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è "${this.currentDetailDirection.name}"?`)) return;
        this.currentDetailDirection.scores = [];
        this.currentDetailDirection.totalScore = 0;
        // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–µ—à
        this.candlesCache.clear();
        // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –æ–±–Ω–æ–≤–∏—Ç—å
        this.saveDirections();
        this.renderDirectionsOnly();
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –ø–∞–Ω–µ–ª—å —Å—á—ë—Ç
        const totalScore = 0;
        const scoreClass = 'score-neutral';
        this.detailDirectionScore.textContent = `–û–±—â–∏–π —Å—á—ë—Ç: 0 –±–∞–ª–ª–æ–≤`;
        this.detailDirectionScore.className = `detail-direction-score ${scoreClass}`;
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤
        this.updateChart();
        this.updateOverallChart();
        this.showNotification('–ó–Ω–∞—á–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã', 'success');
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    validateImportData(data) {
        // –ë–∞–∑–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
        if (!data || typeof data !== 'object') return false;
        if (!data.productivityData || typeof data.productivityData !== 'object') return false;

        const pd = data.productivityData;
        // directions –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
        if (!Array.isArray(pd.directions)) return false;
        for (const direction of pd.directions) {
            if (!direction || typeof direction !== 'object') return false;
            if (!direction.id || !direction.name || !direction.createdAt) return false;
            if (!Array.isArray(direction.scores)) return false;
            for (const score of direction.scores) {
                if (!score || typeof score !== 'object') return false;
                if (typeof score.value !== 'number' || !score.date) return false;
            }
        }
        // –û—Å—Ç–∞–ª—å–Ω–æ–µ ‚Äî –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ (categories, trash, comments, layoutMode, zoomState)
        return true;
    }

    // –ö–æ—Ä–∑–∏–Ω–∞: —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –æ–ø–µ—Ä–∞—Ü–∏–∏
    loadTrash() {
        try { return JSON.parse(localStorage.getItem('productivityTrash') || '{"directions":[],"categories":[]}'); } catch(_) { return { directions: [], categories: [] }; }
    }
    saveTrash() {
        try { localStorage.setItem(this.getStorageKey('productivityTrash'), JSON.stringify(this.trash)); } catch(_) {}
        if (this.currentUser) this.scheduleCloudSave();
    }
    addToTrash(entry) {
        if (!this.trash) this.trash = { directions: [], categories: [] };
        if (entry.type === 'direction') {
            // –ø–æ–º–µ—á–∞–µ–º –≤—Ä–µ–º–µ–Ω–µ–º —É–¥–∞–ª–µ–Ω–∏—è
            this.trash.directions.push({ ...entry.item, _deletedAt: Date.now() });
        } else if (entry.type === 'category') {
            this.trash.categories.push({ ...entry.item, _deletedAt: Date.now() });
        }
        this.saveTrash();
    }
    openTrash() {
        if (!this.trash) this.trash = { directions: [], categories: [] };
        // –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Å–ø–∏—Å–∫–∏
        if (this.trashDirectionsList) {
            this.trashDirectionsList.innerHTML = '';
            this.trash.directions
                .sort((a,b) => (b._deletedAt||0)-(a._deletedAt||0))
                .forEach(dir => this.trashDirectionsList.appendChild(this.renderTrashItem(dir, 'direction')));
        }
        if (this.trashCategoriesList) {
            this.trashCategoriesList.innerHTML = '';
            this.trash.categories
                .sort((a,b) => (b._deletedAt||0)-(a._deletedAt||0))
                .forEach(cat => this.trashCategoriesList.appendChild(this.renderTrashItem(cat, 'category')));
        }
        if (this.trashModal) this.trashModal.style.display = 'flex';
    }
    closeTrash() { if (this.trashModal) this.trashModal.style.display = 'none'; }
    emptyTrash() {
        if (!confirm('–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è?')) return;
        this.trash = { directions: [], categories: [] };
        this.saveTrash();
        this.openTrash();
        this.showNotification('–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞', 'success');
    }
    renderTrashItem(item, type) {
        const el = document.createElement('div');
        el.className = 'trash-item';
        const title = document.createElement('div');
        title.className = 'trash-item-title';
        title.textContent = type === 'direction' ? (item.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è') : `${item.icon||''} ${item.name}`;
        const meta = document.createElement('div');
        meta.className = 'trash-item-meta';
        const date = item._deletedAt ? new Date(item._deletedAt).toLocaleString('ru-RU') : '';
        meta.textContent = `–£–¥–∞–ª–µ–Ω–æ: ${date}`;
        const actions = document.createElement('div');
        actions.className = 'trash-actions';
        const restoreBtn = document.createElement('button');
        restoreBtn.className = 'restore-button';
        restoreBtn.innerHTML = '<i class="fas fa-undo"></i> –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å';
        restoreBtn.addEventListener('click', () => this.restoreFromTrash(item, type));
        const removeBtn = document.createElement('button');
        removeBtn.className = 'remove-button';
        removeBtn.innerHTML = '<i class="fas fa-times"></i> –£–¥–∞–ª–∏—Ç—å –Ω–∞–≤—Å–µ–≥–¥–∞';
        removeBtn.addEventListener('click', () => this.removeFromTrash(item, type));
        actions.appendChild(restoreBtn);
        actions.appendChild(removeBtn);
        el.appendChild(title); el.appendChild(meta); el.appendChild(actions);
        return el;
    }
    restoreFromTrash(item, type) {
        if (type === 'direction') {
            // –∏–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ id
            if (!this.directions.find(d => d.id === item.id)) {
                this.directions.push({ ...item });
                this.saveDirections();
                this.updateDirectionSelect();
                this.renderDirectionsOnly();
            }
            this.trash.directions = this.trash.directions.filter(d => d.id !== item.id);
        } else if (type === 'category') {
            if (!this.categories.find(c => c.id === item.id)) {
                this.categories.push({ ...item });
                this.saveCategories();
                this.updateDetailCategorySelectIfOpen();
                this.renderDirectionsOnly();
            }
            this.trash.categories = this.trash.categories.filter(c => c.id !== item.id);
        }
        this.saveTrash();
        this.openTrash();
        this.showNotification('–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã', 'success');
    }
    removeFromTrash(item, type) {
        if (type === 'direction') {
            this.trash.directions = this.trash.directions.filter(d => d.id !== item.id);
        } else if (type === 'category') {
            this.trash.categories = this.trash.categories.filter(c => c.id !== item.id);
        }
        this.saveTrash();
        this.openTrash();
        this.showNotification('–£–¥–∞–ª–µ–Ω–æ –Ω–∞–≤—Å–µ–≥–¥–∞', 'success');
    }

    // –û—Ç–∫—Ä—ã—Ç–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –ø–∞–Ω–µ–ª–∏ –¥–ª—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    openDetailView(directionId) {
        const direction = this.directions.find(d => d.id == directionId);
        if (!direction) return;

        this.currentDetailDirection = direction;
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –¥–µ—Ç–∞–ª—å–Ω–æ–π –ø–∞–Ω–µ–ª–∏
        this.detailDirectionName.textContent = direction.name;
        
        const totalScore = direction.totalScore || 0;
        const scoreClass = totalScore > 0 ? 'score-positive' : totalScore < 0 ? 'score-negative' : 'score-neutral';
        const scoreText = totalScore > 0 ? `+${totalScore}` : totalScore.toString();
        this.detailDirectionScore.textContent = `–û–±—â–∏–π —Å—á—ë—Ç: ${scoreText} –±–∞–ª–ª–æ–≤`;
        this.detailDirectionScore.className = `detail-direction-score ${scoreClass}`;
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        this.detailCategorySelect.innerHTML = this.getCategoryOptions(direction.category);
        
        // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ –±–∞–ª–ª–æ–≤
        this.detailScoreInput.value = '';

        // –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        if (this.detailDescriptionInput) {
            this.detailDescriptionInput.value = direction.description || '';
        }

        // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞
        this.updateColorPickerUI(direction.color);

        // –∫–∞—Å—Ç–æ–º-—Å—Ç–∏–ª—å —É–¥–∞–ª—ë–Ω ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å
        this.directionDetailPanel.style.display = 'block';
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫
        this.chartSection.style.display = 'block';
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        this.directionSelect.value = direction.id;
        this.updateChart();

        // –ó–∞–ø–æ–ª–Ω—è–µ–º UI –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
        this.populateScoringUI(direction);
        this.updateCalcPreview();
    }

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –ø–∞–Ω–µ–ª–∏
    closeDetailView() {
        this.directionDetailPanel.style.display = 'none';
        this.currentDetailDirection = null;
        
        // –°–∫—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫
        this.chartSection.style.display = 'none';
        // –°–∫—Ä—ã–≤–∞–µ–º –æ–±—â–∏–π –≥—Ä–∞—Ñ–∏–∫
        if (this.overallChartSection) this.overallChartSection.style.display = 'none';
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –∏–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–π –ø–∞–Ω–µ–ª–∏
    saveDetailDescription() {
        if (!this.currentDetailDirection || !this.detailDescriptionInput) return;
        const value = (this.detailDescriptionInput.value || '').trim();
        this.currentDetailDirection.description = value;
        this.saveDirections();
        this.showNotification('–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ', 'success');
    }

    // –í—ã–±–æ—Ä —Ü–≤–µ—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é
    handleColorPick(e) {
        const btn = e.target.closest('.color-chip');
        if (!btn || !this.currentDetailDirection) return;
        const color = btn.getAttribute('data-color');
        this.currentDetailDirection.color = color;
        this.saveDirections();
        this.updateColorPickerUI(color);
        this.renderDirectionsOnly();
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –ø–æ–¥ –∫–∞—Ä—Ç–æ—á–∫–æ–π
        this.updateDirectionPercentInList(this.currentDetailDirection.id);
    }

    // –ë—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º (–º–∞–ø–ø–∏–Ω–≥ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –∫ —Ü–≤–µ—Ç–∞–º)
    // percent picker —É–¥–∞–ª—ë–Ω

    updateDirectionPercentInList(directionId) {
        const node = this.directionsList?.querySelector(`.direction-item[data-id="${directionId}"] .direction-percent`);
        if (!node) return;
        const dir = this.directions.find(d => d.id === directionId);
        node.textContent = this.getDirectionPercentText(dir?.color);
    }

    // –∫–∞—Å—Ç–æ–º-—Å—Ç–∏–ª–∏ —É–¥–∞–ª–µ–Ω—ã

    updateColorPickerUI(selectedColor) {
        if (!this.detailColorPicker) return;
        this.detailColorPicker.querySelectorAll('.color-chip').forEach(el => {
            el.classList.toggle('selected', el.getAttribute('data-color') === selectedColor);
        });
    }

    getDirectionPercentText(color) {
        switch(color) {
            case 'red': return '0%';
            case 'yellow': return '50%';
            case 'green': return '100%';
            case 'blue': return '100%+';
            case 'orange': return '30-50%';
            case 'purple': return '';
            default: return '';
        }
    }



    // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –¥–µ—Ç–∞–ª—å–Ω–æ–π –ø–∞–Ω–µ–ª–∏
    changeDetailDirectionCategory() {
        if (!this.currentDetailDirection) return;

        const newCategory = this.detailCategorySelect.value;
        this.currentDetailDirection.category = newCategory;
        this.saveDirections();
        this.render(); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–∏—Å–æ–∫
        
        const categoryName = this.categories.find(c => c.id === newCategory)?.name || newCategory;
        this.showNotification(`"${this.currentDetailDirection.name}" –ø–µ—Ä–µ–º–µ—â–µ–Ω–æ –≤ "${categoryName}"`, 'success');
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤ –≤ –¥–µ—Ç–∞–ª—å–Ω–æ–π –ø–∞–Ω–µ–ª–∏
    addDetailScore() {
        if (!this.currentDetailDirection) return;

        const scoreValue = parseFloat(this.detailScoreInput.value);
        if (isNaN(scoreValue) || scoreValue === 0) {
            this.showNotification('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤', 'error');
            return;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –±–∞–ª–ª
        const newScore = {
            value: scoreValue,
            date: new Date().toISOString(),
            timestamp: Date.now()
        };
        
        this.currentDetailDirection.scores.push(newScore);
        this.currentDetailDirection.totalScore = (this.currentDetailDirection.totalScore || 0) + scoreValue;
        
        this.saveDirections();
        this.renderDirectionsOnly(); // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–ø–∏—Å–æ–∫
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –¥–µ—Ç–∞–ª—å–Ω–æ–π –ø–∞–Ω–µ–ª–∏
        const totalScore = this.currentDetailDirection.totalScore || 0;
        const scoreClass = totalScore > 0 ? 'score-positive' : totalScore < 0 ? 'score-negative' : 'score-neutral';
        const scoreText = totalScore > 0 ? `+${totalScore}` : totalScore.toString();
        this.detailDirectionScore.textContent = `–û–±—â–∏–π —Å—á—ë—Ç: ${scoreText} –±–∞–ª–ª–æ–≤`;
        this.detailDirectionScore.className = `detail-direction-score ${scoreClass}`;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫ (—Å–æ—Ö—Ä–∞–Ω—è—è –≤—ã–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è)
        this.updateChart();
        
        // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
        this.detailScoreInput.value = '';
        
        const action = scoreValue > 0 ? '–¥–æ–±–∞–≤–ª–µ–Ω—ã' : '–≤—ã—á—Ç–µ–Ω—ã';
        const absValue = Math.abs(scoreValue);
        this.showNotification(`${absValue} –±–∞–ª–ª–æ–≤ ${action} –∫ "${this.currentDetailDirection.name}"`, 'success');
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–π –ø–∞–Ω–µ–ª–∏
    deleteDetailDirection() {
        if (!this.currentDetailDirection) return;

        if (confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ "${this.currentDetailDirection.name}"?`)) {
            const directionName = this.currentDetailDirection.name;
            // –í –∫–æ—Ä–∑–∏–Ω—É –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
            this.addToTrash({ type: 'direction', item: this.currentDetailDirection });
            this.directions = this.directions.filter(d => d.id !== this.currentDetailDirection.id);
            this.saveDirections();
            this.render();
            this.updateDirectionSelect();
            this.closeDetailView();
            this.showNotification(`–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ "${directionName}" —É–¥–∞–ª–µ–Ω–æ`, 'success');
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–µ–∫–µ—Ä–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
let tracker;
document.addEventListener('DOMContentLoaded', () => {
    tracker = new ProductivityTracker();
    tracker.updateDirectionSelect();
    // –î–µ–ª–∞–µ–º tracker –¥–æ—Å—Ç—É–ø–Ω—ã–º –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –∫–æ–ª–ª–±–µ–∫–æ–≤ –∑—É–º–∞
    window.tracker = tracker;
});
